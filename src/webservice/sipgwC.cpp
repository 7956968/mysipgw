/* sipgwC.cpp
   Generated by gSOAP 2.8.70 for sipgwSvr.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "sipgwH.h"

SOAP_SOURCE_STAMP("@(#) sipgwC.cpp ver 2.8.70 2018-10-08 02:08:51 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_ns2__restart_play_back:
		return soap_in_ns2__restart_play_back(soap, NULL, NULL, "ns2:restart-play-back");
	case SOAP_TYPE_ns2__restart_play_backResponse:
		return soap_in_ns2__restart_play_backResponse(soap, NULL, NULL, "ns2:restart-play-backResponse");
	case SOAP_TYPE_ns2__pause_play_back:
		return soap_in_ns2__pause_play_back(soap, NULL, NULL, "ns2:pause-play-back");
	case SOAP_TYPE_ns2__pause_play_backResponse:
		return soap_in_ns2__pause_play_backResponse(soap, NULL, NULL, "ns2:pause-play-backResponse");
	case SOAP_TYPE_ns2__stop_play_back:
		return soap_in_ns2__stop_play_back(soap, NULL, NULL, "ns2:stop-play-back");
	case SOAP_TYPE_ns2__stop_play_backResponse:
		return soap_in_ns2__stop_play_backResponse(soap, NULL, NULL, "ns2:stop-play-backResponse");
	case SOAP_TYPE_ns2__start_play_back:
		return soap_in_ns2__start_play_back(soap, NULL, NULL, "ns2:start-play-back");
	case SOAP_TYPE_ns2__start_play_backResponse:
		return soap_in_ns2__start_play_backResponse(soap, NULL, NULL, "ns2:start-play-backResponse");
	case SOAP_TYPE_ns2__stop_real_play:
		return soap_in_ns2__stop_real_play(soap, NULL, NULL, "ns2:stop-real-play");
	case SOAP_TYPE_ns2__stop_real_playResponse:
		return soap_in_ns2__stop_real_playResponse(soap, NULL, NULL, "ns2:stop-real-playResponse");
	case SOAP_TYPE_ns2__start_real_play:
		return soap_in_ns2__start_real_play(soap, NULL, NULL, "ns2:start-real-play");
	case SOAP_TYPE_ns2__start_real_playResponse:
		return soap_in_ns2__start_real_playResponse(soap, NULL, NULL, "ns2:start-real-playResponse");
	case SOAP_TYPE_ns2__ptz_control:
		return soap_in_ns2__ptz_control(soap, NULL, NULL, "ns2:ptz-control");
	case SOAP_TYPE_ns2__ptz_controlResponse:
		return soap_in_ns2__ptz_controlResponse(soap, NULL, NULL, "ns2:ptz-controlResponse");
	case SOAP_TYPE_ns2__get_directory_info:
		return soap_in_ns2__get_directory_info(soap, NULL, NULL, "ns2:get-directory-info");
	case SOAP_TYPE_ns2__get_directory_infoResponse:
		return soap_in_ns2__get_directory_infoResponse(soap, NULL, NULL, "ns2:get-directory-infoResponse");
	case SOAP_TYPE_ns2__keepalive:
		return soap_in_ns2__keepalive(soap, NULL, NULL, "ns2:keepalive");
	case SOAP_TYPE_ns2__keepaliveResponse:
		return soap_in_ns2__keepaliveResponse(soap, NULL, NULL, "ns2:keepaliveResponse");
	case SOAP_TYPE_ns2__logout:
		return soap_in_ns2__logout(soap, NULL, NULL, "ns2:logout");
	case SOAP_TYPE_ns2__logoutResponse:
		return soap_in_ns2__logoutResponse(soap, NULL, NULL, "ns2:logoutResponse");
	case SOAP_TYPE_ns2__login:
		return soap_in_ns2__login(soap, NULL, NULL, "ns2:login");
	case SOAP_TYPE_ns2__loginResponse:
		return soap_in_ns2__loginResponse(soap, NULL, NULL, "ns2:loginResponse");
	case SOAP_TYPE_PointerTostring:
		return soap_in_PointerTostring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:restart-play-back"))
		{	*type = SOAP_TYPE_ns2__restart_play_back;
			return soap_in_ns2__restart_play_back(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:restart-play-backResponse"))
		{	*type = SOAP_TYPE_ns2__restart_play_backResponse;
			return soap_in_ns2__restart_play_backResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:pause-play-back"))
		{	*type = SOAP_TYPE_ns2__pause_play_back;
			return soap_in_ns2__pause_play_back(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:pause-play-backResponse"))
		{	*type = SOAP_TYPE_ns2__pause_play_backResponse;
			return soap_in_ns2__pause_play_backResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:stop-play-back"))
		{	*type = SOAP_TYPE_ns2__stop_play_back;
			return soap_in_ns2__stop_play_back(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:stop-play-backResponse"))
		{	*type = SOAP_TYPE_ns2__stop_play_backResponse;
			return soap_in_ns2__stop_play_backResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:start-play-back"))
		{	*type = SOAP_TYPE_ns2__start_play_back;
			return soap_in_ns2__start_play_back(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:start-play-backResponse"))
		{	*type = SOAP_TYPE_ns2__start_play_backResponse;
			return soap_in_ns2__start_play_backResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:stop-real-play"))
		{	*type = SOAP_TYPE_ns2__stop_real_play;
			return soap_in_ns2__stop_real_play(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:stop-real-playResponse"))
		{	*type = SOAP_TYPE_ns2__stop_real_playResponse;
			return soap_in_ns2__stop_real_playResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:start-real-play"))
		{	*type = SOAP_TYPE_ns2__start_real_play;
			return soap_in_ns2__start_real_play(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:start-real-playResponse"))
		{	*type = SOAP_TYPE_ns2__start_real_playResponse;
			return soap_in_ns2__start_real_playResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:ptz-control"))
		{	*type = SOAP_TYPE_ns2__ptz_control;
			return soap_in_ns2__ptz_control(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:ptz-controlResponse"))
		{	*type = SOAP_TYPE_ns2__ptz_controlResponse;
			return soap_in_ns2__ptz_controlResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:get-directory-info"))
		{	*type = SOAP_TYPE_ns2__get_directory_info;
			return soap_in_ns2__get_directory_info(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:get-directory-infoResponse"))
		{	*type = SOAP_TYPE_ns2__get_directory_infoResponse;
			return soap_in_ns2__get_directory_infoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:keepalive"))
		{	*type = SOAP_TYPE_ns2__keepalive;
			return soap_in_ns2__keepalive(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:keepaliveResponse"))
		{	*type = SOAP_TYPE_ns2__keepaliveResponse;
			return soap_in_ns2__keepaliveResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:logout"))
		{	*type = SOAP_TYPE_ns2__logout;
			return soap_in_ns2__logout(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:logoutResponse"))
		{	*type = SOAP_TYPE_ns2__logoutResponse;
			return soap_in_ns2__logoutResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:login"))
		{	*type = SOAP_TYPE_ns2__login;
			return soap_in_ns2__login(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:loginResponse"))
		{	*type = SOAP_TYPE_ns2__loginResponse;
			return soap_in_ns2__loginResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_ns2__restart_play_back:
		return soap_out_ns2__restart_play_back(soap, tag, id, (const struct ns2__restart_play_back *)ptr, "ns2:restart-play-back");
	case SOAP_TYPE_ns2__restart_play_backResponse:
		return soap_out_ns2__restart_play_backResponse(soap, tag, id, (const struct ns2__restart_play_backResponse *)ptr, "ns2:restart-play-backResponse");
	case SOAP_TYPE_ns2__pause_play_back:
		return soap_out_ns2__pause_play_back(soap, tag, id, (const struct ns2__pause_play_back *)ptr, "ns2:pause-play-back");
	case SOAP_TYPE_ns2__pause_play_backResponse:
		return soap_out_ns2__pause_play_backResponse(soap, tag, id, (const struct ns2__pause_play_backResponse *)ptr, "ns2:pause-play-backResponse");
	case SOAP_TYPE_ns2__stop_play_back:
		return soap_out_ns2__stop_play_back(soap, tag, id, (const struct ns2__stop_play_back *)ptr, "ns2:stop-play-back");
	case SOAP_TYPE_ns2__stop_play_backResponse:
		return soap_out_ns2__stop_play_backResponse(soap, tag, id, (const struct ns2__stop_play_backResponse *)ptr, "ns2:stop-play-backResponse");
	case SOAP_TYPE_ns2__start_play_back:
		return soap_out_ns2__start_play_back(soap, tag, id, (const struct ns2__start_play_back *)ptr, "ns2:start-play-back");
	case SOAP_TYPE_ns2__start_play_backResponse:
		return soap_out_ns2__start_play_backResponse(soap, tag, id, (const struct ns2__start_play_backResponse *)ptr, "ns2:start-play-backResponse");
	case SOAP_TYPE_ns2__stop_real_play:
		return soap_out_ns2__stop_real_play(soap, tag, id, (const struct ns2__stop_real_play *)ptr, "ns2:stop-real-play");
	case SOAP_TYPE_ns2__stop_real_playResponse:
		return soap_out_ns2__stop_real_playResponse(soap, tag, id, (const struct ns2__stop_real_playResponse *)ptr, "ns2:stop-real-playResponse");
	case SOAP_TYPE_ns2__start_real_play:
		return soap_out_ns2__start_real_play(soap, tag, id, (const struct ns2__start_real_play *)ptr, "ns2:start-real-play");
	case SOAP_TYPE_ns2__start_real_playResponse:
		return soap_out_ns2__start_real_playResponse(soap, tag, id, (const struct ns2__start_real_playResponse *)ptr, "ns2:start-real-playResponse");
	case SOAP_TYPE_ns2__ptz_control:
		return soap_out_ns2__ptz_control(soap, tag, id, (const struct ns2__ptz_control *)ptr, "ns2:ptz-control");
	case SOAP_TYPE_ns2__ptz_controlResponse:
		return soap_out_ns2__ptz_controlResponse(soap, tag, id, (const struct ns2__ptz_controlResponse *)ptr, "ns2:ptz-controlResponse");
	case SOAP_TYPE_ns2__get_directory_info:
		return soap_out_ns2__get_directory_info(soap, tag, id, (const struct ns2__get_directory_info *)ptr, "ns2:get-directory-info");
	case SOAP_TYPE_ns2__get_directory_infoResponse:
		return soap_out_ns2__get_directory_infoResponse(soap, tag, id, (const struct ns2__get_directory_infoResponse *)ptr, "ns2:get-directory-infoResponse");
	case SOAP_TYPE_ns2__keepalive:
		return soap_out_ns2__keepalive(soap, tag, id, (const struct ns2__keepalive *)ptr, "ns2:keepalive");
	case SOAP_TYPE_ns2__keepaliveResponse:
		return soap_out_ns2__keepaliveResponse(soap, tag, id, (const struct ns2__keepaliveResponse *)ptr, "ns2:keepaliveResponse");
	case SOAP_TYPE_ns2__logout:
		return soap_out_ns2__logout(soap, tag, id, (const struct ns2__logout *)ptr, "ns2:logout");
	case SOAP_TYPE_ns2__logoutResponse:
		return soap_out_ns2__logoutResponse(soap, tag, id, (const struct ns2__logoutResponse *)ptr, "ns2:logoutResponse");
	case SOAP_TYPE_ns2__login:
		return soap_out_ns2__login(soap, tag, id, (const struct ns2__login *)ptr, "ns2:login");
	case SOAP_TYPE_ns2__loginResponse:
		return soap_out_ns2__loginResponse(soap, tag, id, (const struct ns2__loginResponse *)ptr, "ns2:loginResponse");
	case SOAP_TYPE_PointerTostring:
		return soap_out_PointerTostring(soap, tag, id, (char **const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in sipgwC.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag); /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns2__restart_play_back:
		soap_serialize_ns2__restart_play_back(soap, (const struct ns2__restart_play_back *)ptr);
		break;
	case SOAP_TYPE_ns2__restart_play_backResponse:
		soap_serialize_ns2__restart_play_backResponse(soap, (const struct ns2__restart_play_backResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__pause_play_back:
		soap_serialize_ns2__pause_play_back(soap, (const struct ns2__pause_play_back *)ptr);
		break;
	case SOAP_TYPE_ns2__pause_play_backResponse:
		soap_serialize_ns2__pause_play_backResponse(soap, (const struct ns2__pause_play_backResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__stop_play_back:
		soap_serialize_ns2__stop_play_back(soap, (const struct ns2__stop_play_back *)ptr);
		break;
	case SOAP_TYPE_ns2__stop_play_backResponse:
		soap_serialize_ns2__stop_play_backResponse(soap, (const struct ns2__stop_play_backResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__start_play_back:
		soap_serialize_ns2__start_play_back(soap, (const struct ns2__start_play_back *)ptr);
		break;
	case SOAP_TYPE_ns2__start_play_backResponse:
		soap_serialize_ns2__start_play_backResponse(soap, (const struct ns2__start_play_backResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__stop_real_play:
		soap_serialize_ns2__stop_real_play(soap, (const struct ns2__stop_real_play *)ptr);
		break;
	case SOAP_TYPE_ns2__stop_real_playResponse:
		soap_serialize_ns2__stop_real_playResponse(soap, (const struct ns2__stop_real_playResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__start_real_play:
		soap_serialize_ns2__start_real_play(soap, (const struct ns2__start_real_play *)ptr);
		break;
	case SOAP_TYPE_ns2__start_real_playResponse:
		soap_serialize_ns2__start_real_playResponse(soap, (const struct ns2__start_real_playResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__ptz_control:
		soap_serialize_ns2__ptz_control(soap, (const struct ns2__ptz_control *)ptr);
		break;
	case SOAP_TYPE_ns2__ptz_controlResponse:
		soap_serialize_ns2__ptz_controlResponse(soap, (const struct ns2__ptz_controlResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__get_directory_info:
		soap_serialize_ns2__get_directory_info(soap, (const struct ns2__get_directory_info *)ptr);
		break;
	case SOAP_TYPE_ns2__get_directory_infoResponse:
		soap_serialize_ns2__get_directory_infoResponse(soap, (const struct ns2__get_directory_infoResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__keepalive:
		soap_serialize_ns2__keepalive(soap, (const struct ns2__keepalive *)ptr);
		break;
	case SOAP_TYPE_ns2__keepaliveResponse:
		soap_serialize_ns2__keepaliveResponse(soap, (const struct ns2__keepaliveResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__logout:
		soap_serialize_ns2__logout(soap, (const struct ns2__logout *)ptr);
		break;
	case SOAP_TYPE_ns2__logoutResponse:
		soap_serialize_ns2__logoutResponse(soap, (const struct ns2__logoutResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__login:
		soap_serialize_ns2__login(soap, (const struct ns2__login *)ptr);
		break;
	case SOAP_TYPE_ns2__loginResponse:
		soap_serialize_ns2__loginResponse(soap, (const struct ns2__loginResponse *)ptr);
		break;
	case SOAP_TYPE_PointerTostring:
		soap_serialize_PointerTostring(soap, (char **const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 sipgw_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_ns2__loginResponse:
		return (void*)sipgw_instantiate_ns2__loginResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__login:
		return (void*)sipgw_instantiate_ns2__login(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__logoutResponse:
		return (void*)sipgw_instantiate_ns2__logoutResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__logout:
		return (void*)sipgw_instantiate_ns2__logout(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__keepaliveResponse:
		return (void*)sipgw_instantiate_ns2__keepaliveResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__keepalive:
		return (void*)sipgw_instantiate_ns2__keepalive(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__get_directory_infoResponse:
		return (void*)sipgw_instantiate_ns2__get_directory_infoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__get_directory_info:
		return (void*)sipgw_instantiate_ns2__get_directory_info(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__ptz_controlResponse:
		return (void*)sipgw_instantiate_ns2__ptz_controlResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__ptz_control:
		return (void*)sipgw_instantiate_ns2__ptz_control(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__start_real_playResponse:
		return (void*)sipgw_instantiate_ns2__start_real_playResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__start_real_play:
		return (void*)sipgw_instantiate_ns2__start_real_play(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__stop_real_playResponse:
		return (void*)sipgw_instantiate_ns2__stop_real_playResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__stop_real_play:
		return (void*)sipgw_instantiate_ns2__stop_real_play(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__start_play_backResponse:
		return (void*)sipgw_instantiate_ns2__start_play_backResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__start_play_back:
		return (void*)sipgw_instantiate_ns2__start_play_back(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__stop_play_backResponse:
		return (void*)sipgw_instantiate_ns2__stop_play_backResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__stop_play_back:
		return (void*)sipgw_instantiate_ns2__stop_play_back(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__pause_play_backResponse:
		return (void*)sipgw_instantiate_ns2__pause_play_backResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__pause_play_back:
		return (void*)sipgw_instantiate_ns2__pause_play_back(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__restart_play_backResponse:
		return (void*)sipgw_instantiate_ns2__restart_play_backResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__restart_play_back:
		return (void*)sipgw_instantiate_ns2__restart_play_back(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)sipgw_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)sipgw_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)sipgw_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)sipgw_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)sipgw_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 sipgw_fdelete(struct soap *soap, struct soap_clist *p)
{	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_ns2__loginResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__loginResponse*>(p->ptr), struct ns2__loginResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__loginResponse*>(p->ptr), struct ns2__loginResponse);
		break;
	case SOAP_TYPE_ns2__login:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__login*>(p->ptr), struct ns2__login);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__login*>(p->ptr), struct ns2__login);
		break;
	case SOAP_TYPE_ns2__logoutResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__logoutResponse*>(p->ptr), struct ns2__logoutResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__logoutResponse*>(p->ptr), struct ns2__logoutResponse);
		break;
	case SOAP_TYPE_ns2__logout:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__logout*>(p->ptr), struct ns2__logout);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__logout*>(p->ptr), struct ns2__logout);
		break;
	case SOAP_TYPE_ns2__keepaliveResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__keepaliveResponse*>(p->ptr), struct ns2__keepaliveResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__keepaliveResponse*>(p->ptr), struct ns2__keepaliveResponse);
		break;
	case SOAP_TYPE_ns2__keepalive:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__keepalive*>(p->ptr), struct ns2__keepalive);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__keepalive*>(p->ptr), struct ns2__keepalive);
		break;
	case SOAP_TYPE_ns2__get_directory_infoResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__get_directory_infoResponse*>(p->ptr), struct ns2__get_directory_infoResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__get_directory_infoResponse*>(p->ptr), struct ns2__get_directory_infoResponse);
		break;
	case SOAP_TYPE_ns2__get_directory_info:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__get_directory_info*>(p->ptr), struct ns2__get_directory_info);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__get_directory_info*>(p->ptr), struct ns2__get_directory_info);
		break;
	case SOAP_TYPE_ns2__ptz_controlResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__ptz_controlResponse*>(p->ptr), struct ns2__ptz_controlResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__ptz_controlResponse*>(p->ptr), struct ns2__ptz_controlResponse);
		break;
	case SOAP_TYPE_ns2__ptz_control:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__ptz_control*>(p->ptr), struct ns2__ptz_control);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__ptz_control*>(p->ptr), struct ns2__ptz_control);
		break;
	case SOAP_TYPE_ns2__start_real_playResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__start_real_playResponse*>(p->ptr), struct ns2__start_real_playResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__start_real_playResponse*>(p->ptr), struct ns2__start_real_playResponse);
		break;
	case SOAP_TYPE_ns2__start_real_play:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__start_real_play*>(p->ptr), struct ns2__start_real_play);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__start_real_play*>(p->ptr), struct ns2__start_real_play);
		break;
	case SOAP_TYPE_ns2__stop_real_playResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__stop_real_playResponse*>(p->ptr), struct ns2__stop_real_playResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__stop_real_playResponse*>(p->ptr), struct ns2__stop_real_playResponse);
		break;
	case SOAP_TYPE_ns2__stop_real_play:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__stop_real_play*>(p->ptr), struct ns2__stop_real_play);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__stop_real_play*>(p->ptr), struct ns2__stop_real_play);
		break;
	case SOAP_TYPE_ns2__start_play_backResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__start_play_backResponse*>(p->ptr), struct ns2__start_play_backResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__start_play_backResponse*>(p->ptr), struct ns2__start_play_backResponse);
		break;
	case SOAP_TYPE_ns2__start_play_back:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__start_play_back*>(p->ptr), struct ns2__start_play_back);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__start_play_back*>(p->ptr), struct ns2__start_play_back);
		break;
	case SOAP_TYPE_ns2__stop_play_backResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__stop_play_backResponse*>(p->ptr), struct ns2__stop_play_backResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__stop_play_backResponse*>(p->ptr), struct ns2__stop_play_backResponse);
		break;
	case SOAP_TYPE_ns2__stop_play_back:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__stop_play_back*>(p->ptr), struct ns2__stop_play_back);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__stop_play_back*>(p->ptr), struct ns2__stop_play_back);
		break;
	case SOAP_TYPE_ns2__pause_play_backResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__pause_play_backResponse*>(p->ptr), struct ns2__pause_play_backResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__pause_play_backResponse*>(p->ptr), struct ns2__pause_play_backResponse);
		break;
	case SOAP_TYPE_ns2__pause_play_back:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__pause_play_back*>(p->ptr), struct ns2__pause_play_back);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__pause_play_back*>(p->ptr), struct ns2__pause_play_back);
		break;
	case SOAP_TYPE_ns2__restart_play_backResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__restart_play_backResponse*>(p->ptr), struct ns2__restart_play_backResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__restart_play_backResponse*>(p->ptr), struct ns2__restart_play_backResponse);
		break;
	case SOAP_TYPE_ns2__restart_play_back:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct ns2__restart_play_back*>(p->ptr), struct ns2__restart_play_back);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct ns2__restart_play_back*>(p->ptr), struct ns2__restart_play_back);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 sipgw_fbase(int t, int b)
{	(void)t; (void)b; /* appease -Wall -Werror */
	return 0;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 sipgw_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_ns2__loginResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__loginResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__loginResponse*)p = *(struct ns2__loginResponse*)q;
		break;
	case SOAP_TYPE_ns2__login:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__login type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__login*)p = *(struct ns2__login*)q;
		break;
	case SOAP_TYPE_ns2__logoutResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__logoutResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__logoutResponse*)p = *(struct ns2__logoutResponse*)q;
		break;
	case SOAP_TYPE_ns2__logout:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__logout type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__logout*)p = *(struct ns2__logout*)q;
		break;
	case SOAP_TYPE_ns2__keepaliveResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__keepaliveResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__keepaliveResponse*)p = *(struct ns2__keepaliveResponse*)q;
		break;
	case SOAP_TYPE_ns2__keepalive:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__keepalive type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__keepalive*)p = *(struct ns2__keepalive*)q;
		break;
	case SOAP_TYPE_ns2__get_directory_infoResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__get_directory_infoResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__get_directory_infoResponse*)p = *(struct ns2__get_directory_infoResponse*)q;
		break;
	case SOAP_TYPE_ns2__get_directory_info:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__get_directory_info type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__get_directory_info*)p = *(struct ns2__get_directory_info*)q;
		break;
	case SOAP_TYPE_ns2__ptz_controlResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__ptz_controlResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__ptz_controlResponse*)p = *(struct ns2__ptz_controlResponse*)q;
		break;
	case SOAP_TYPE_ns2__ptz_control:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__ptz_control type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__ptz_control*)p = *(struct ns2__ptz_control*)q;
		break;
	case SOAP_TYPE_ns2__start_real_playResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__start_real_playResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__start_real_playResponse*)p = *(struct ns2__start_real_playResponse*)q;
		break;
	case SOAP_TYPE_ns2__start_real_play:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__start_real_play type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__start_real_play*)p = *(struct ns2__start_real_play*)q;
		break;
	case SOAP_TYPE_ns2__stop_real_playResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__stop_real_playResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__stop_real_playResponse*)p = *(struct ns2__stop_real_playResponse*)q;
		break;
	case SOAP_TYPE_ns2__stop_real_play:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__stop_real_play type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__stop_real_play*)p = *(struct ns2__stop_real_play*)q;
		break;
	case SOAP_TYPE_ns2__start_play_backResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__start_play_backResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__start_play_backResponse*)p = *(struct ns2__start_play_backResponse*)q;
		break;
	case SOAP_TYPE_ns2__start_play_back:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__start_play_back type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__start_play_back*)p = *(struct ns2__start_play_back*)q;
		break;
	case SOAP_TYPE_ns2__stop_play_backResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__stop_play_backResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__stop_play_backResponse*)p = *(struct ns2__stop_play_backResponse*)q;
		break;
	case SOAP_TYPE_ns2__stop_play_back:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__stop_play_back type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__stop_play_back*)p = *(struct ns2__stop_play_back*)q;
		break;
	case SOAP_TYPE_ns2__pause_play_backResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__pause_play_backResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__pause_play_backResponse*)p = *(struct ns2__pause_play_backResponse*)q;
		break;
	case SOAP_TYPE_ns2__pause_play_back:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__pause_play_back type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__pause_play_back*)p = *(struct ns2__pause_play_back*)q;
		break;
	case SOAP_TYPE_ns2__restart_play_backResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__restart_play_backResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__restart_play_backResponse*)p = *(struct ns2__restart_play_backResponse*)q;
		break;
	case SOAP_TYPE_ns2__restart_play_back:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct ns2__restart_play_back type=%d location=%p object=%p\n", t, p, q));
		*(struct ns2__restart_play_back*)p = *(struct ns2__restart_play_back*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 sipgw_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Fault, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 sipgw_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Reason, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 sipgw_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Detail, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 sipgw_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Code, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 sipgw_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Header, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__restart_play_back(struct soap *soap, struct ns2__restart_play_back *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->user_id);
	soap_default_string(soap, &a->target_dev_id);
	soap_default_string(soap, &a->target_realm);
	soap_default_string(soap, &a->media_recv_ip);
	soap_default_int(soap, &a->media_recv_port);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__restart_play_back(struct soap *soap, const struct ns2__restart_play_back *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->user_id);
	soap_serialize_string(soap, (char*const*)&a->target_dev_id);
	soap_serialize_string(soap, (char*const*)&a->target_realm);
	soap_serialize_string(soap, (char*const*)&a->media_recv_ip);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__restart_play_back(struct soap *soap, const char *tag, int id, const struct ns2__restart_play_back *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__restart_play_back), type))
		return soap->error;
	if (soap_out_string(soap, "user-id", -1, (char*const*)&a->user_id, ""))
		return soap->error;
	if (soap_out_string(soap, "target-dev-id", -1, (char*const*)&a->target_dev_id, ""))
		return soap->error;
	if (soap_out_string(soap, "target-realm", -1, (char*const*)&a->target_realm, ""))
		return soap->error;
	if (soap_out_string(soap, "media-recv-ip", -1, (char*const*)&a->media_recv_ip, ""))
		return soap->error;
	if (soap_out_int(soap, "media-recv-port", -1, &a->media_recv_port, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__restart_play_back * SOAP_FMAC4 soap_in_ns2__restart_play_back(struct soap *soap, const char *tag, struct ns2__restart_play_back *a, const char *type)
{
	size_t soap_flag_user_id = 1;
	size_t soap_flag_target_dev_id = 1;
	size_t soap_flag_target_realm = 1;
	size_t soap_flag_media_recv_ip = 1;
	size_t soap_flag_media_recv_port = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__restart_play_back *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__restart_play_back, sizeof(struct ns2__restart_play_back), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__restart_play_back(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_user_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "user-id", (char**)&a->user_id, "xsd:string"))
				{	soap_flag_user_id--;
					continue;
				}
			}
			if (soap_flag_target_dev_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "target-dev-id", (char**)&a->target_dev_id, "xsd:string"))
				{	soap_flag_target_dev_id--;
					continue;
				}
			}
			if (soap_flag_target_realm && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "target-realm", (char**)&a->target_realm, "xsd:string"))
				{	soap_flag_target_realm--;
					continue;
				}
			}
			if (soap_flag_media_recv_ip && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "media-recv-ip", (char**)&a->media_recv_ip, "xsd:string"))
				{	soap_flag_media_recv_ip--;
					continue;
				}
			}
			if (soap_flag_media_recv_port && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "media-recv-port", &a->media_recv_port, "xsd:int"))
				{	soap_flag_media_recv_port--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_media_recv_port > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__restart_play_back *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__restart_play_back, SOAP_TYPE_ns2__restart_play_back, sizeof(struct ns2__restart_play_back), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__restart_play_back * SOAP_FMAC2 sipgw_instantiate_ns2__restart_play_back(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_ns2__restart_play_back(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__restart_play_back *p;
	size_t k = sizeof(struct ns2__restart_play_back);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__restart_play_back, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__restart_play_back);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__restart_play_back, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__restart_play_back location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__restart_play_back(struct soap *soap, const struct ns2__restart_play_back *a, const char *tag, const char *type)
{
	if (soap_out_ns2__restart_play_back(soap, tag ? tag : "ns2:restart-play-back", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__restart_play_back * SOAP_FMAC4 soap_get_ns2__restart_play_back(struct soap *soap, struct ns2__restart_play_back *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__restart_play_back(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__restart_play_backResponse(struct soap *soap, struct ns2__restart_play_backResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__restart_play_backResponse(struct soap *soap, const struct ns2__restart_play_backResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__restart_play_backResponse(struct soap *soap, const char *tag, int id, const struct ns2__restart_play_backResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__restart_play_backResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__restart_play_backResponse * SOAP_FMAC4 soap_in_ns2__restart_play_backResponse(struct soap *soap, const char *tag, struct ns2__restart_play_backResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__restart_play_backResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__restart_play_backResponse, sizeof(struct ns2__restart_play_backResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__restart_play_backResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__restart_play_backResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__restart_play_backResponse, SOAP_TYPE_ns2__restart_play_backResponse, sizeof(struct ns2__restart_play_backResponse), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__restart_play_backResponse * SOAP_FMAC2 sipgw_instantiate_ns2__restart_play_backResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_ns2__restart_play_backResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__restart_play_backResponse *p;
	size_t k = sizeof(struct ns2__restart_play_backResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__restart_play_backResponse, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__restart_play_backResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__restart_play_backResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__restart_play_backResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__restart_play_backResponse(struct soap *soap, const struct ns2__restart_play_backResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__restart_play_backResponse(soap, tag ? tag : "ns2:restart-play-backResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__restart_play_backResponse * SOAP_FMAC4 soap_get_ns2__restart_play_backResponse(struct soap *soap, struct ns2__restart_play_backResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__restart_play_backResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__pause_play_back(struct soap *soap, struct ns2__pause_play_back *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->user_id);
	soap_default_string(soap, &a->target_dev_id);
	soap_default_string(soap, &a->target_realm);
	soap_default_string(soap, &a->media_recv_ip);
	soap_default_int(soap, &a->media_recv_port);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__pause_play_back(struct soap *soap, const struct ns2__pause_play_back *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->user_id);
	soap_serialize_string(soap, (char*const*)&a->target_dev_id);
	soap_serialize_string(soap, (char*const*)&a->target_realm);
	soap_serialize_string(soap, (char*const*)&a->media_recv_ip);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__pause_play_back(struct soap *soap, const char *tag, int id, const struct ns2__pause_play_back *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__pause_play_back), type))
		return soap->error;
	if (soap_out_string(soap, "user-id", -1, (char*const*)&a->user_id, ""))
		return soap->error;
	if (soap_out_string(soap, "target-dev-id", -1, (char*const*)&a->target_dev_id, ""))
		return soap->error;
	if (soap_out_string(soap, "target-realm", -1, (char*const*)&a->target_realm, ""))
		return soap->error;
	if (soap_out_string(soap, "media-recv-ip", -1, (char*const*)&a->media_recv_ip, ""))
		return soap->error;
	if (soap_out_int(soap, "media-recv-port", -1, &a->media_recv_port, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__pause_play_back * SOAP_FMAC4 soap_in_ns2__pause_play_back(struct soap *soap, const char *tag, struct ns2__pause_play_back *a, const char *type)
{
	size_t soap_flag_user_id = 1;
	size_t soap_flag_target_dev_id = 1;
	size_t soap_flag_target_realm = 1;
	size_t soap_flag_media_recv_ip = 1;
	size_t soap_flag_media_recv_port = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__pause_play_back *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__pause_play_back, sizeof(struct ns2__pause_play_back), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__pause_play_back(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_user_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "user-id", (char**)&a->user_id, "xsd:string"))
				{	soap_flag_user_id--;
					continue;
				}
			}
			if (soap_flag_target_dev_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "target-dev-id", (char**)&a->target_dev_id, "xsd:string"))
				{	soap_flag_target_dev_id--;
					continue;
				}
			}
			if (soap_flag_target_realm && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "target-realm", (char**)&a->target_realm, "xsd:string"))
				{	soap_flag_target_realm--;
					continue;
				}
			}
			if (soap_flag_media_recv_ip && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "media-recv-ip", (char**)&a->media_recv_ip, "xsd:string"))
				{	soap_flag_media_recv_ip--;
					continue;
				}
			}
			if (soap_flag_media_recv_port && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "media-recv-port", &a->media_recv_port, "xsd:int"))
				{	soap_flag_media_recv_port--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_media_recv_port > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__pause_play_back *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__pause_play_back, SOAP_TYPE_ns2__pause_play_back, sizeof(struct ns2__pause_play_back), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__pause_play_back * SOAP_FMAC2 sipgw_instantiate_ns2__pause_play_back(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_ns2__pause_play_back(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__pause_play_back *p;
	size_t k = sizeof(struct ns2__pause_play_back);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__pause_play_back, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__pause_play_back);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__pause_play_back, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__pause_play_back location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__pause_play_back(struct soap *soap, const struct ns2__pause_play_back *a, const char *tag, const char *type)
{
	if (soap_out_ns2__pause_play_back(soap, tag ? tag : "ns2:pause-play-back", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__pause_play_back * SOAP_FMAC4 soap_get_ns2__pause_play_back(struct soap *soap, struct ns2__pause_play_back *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__pause_play_back(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__pause_play_backResponse(struct soap *soap, struct ns2__pause_play_backResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__pause_play_backResponse(struct soap *soap, const struct ns2__pause_play_backResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__pause_play_backResponse(struct soap *soap, const char *tag, int id, const struct ns2__pause_play_backResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__pause_play_backResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__pause_play_backResponse * SOAP_FMAC4 soap_in_ns2__pause_play_backResponse(struct soap *soap, const char *tag, struct ns2__pause_play_backResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__pause_play_backResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__pause_play_backResponse, sizeof(struct ns2__pause_play_backResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__pause_play_backResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__pause_play_backResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__pause_play_backResponse, SOAP_TYPE_ns2__pause_play_backResponse, sizeof(struct ns2__pause_play_backResponse), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__pause_play_backResponse * SOAP_FMAC2 sipgw_instantiate_ns2__pause_play_backResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_ns2__pause_play_backResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__pause_play_backResponse *p;
	size_t k = sizeof(struct ns2__pause_play_backResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__pause_play_backResponse, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__pause_play_backResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__pause_play_backResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__pause_play_backResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__pause_play_backResponse(struct soap *soap, const struct ns2__pause_play_backResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__pause_play_backResponse(soap, tag ? tag : "ns2:pause-play-backResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__pause_play_backResponse * SOAP_FMAC4 soap_get_ns2__pause_play_backResponse(struct soap *soap, struct ns2__pause_play_backResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__pause_play_backResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__stop_play_back(struct soap *soap, struct ns2__stop_play_back *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->user_id);
	soap_default_string(soap, &a->target_dev_id);
	soap_default_string(soap, &a->target_realm);
	soap_default_string(soap, &a->media_recv_ip);
	soap_default_int(soap, &a->media_recv_port);
	soap_default_string(soap, &a->start_time);
	soap_default_string(soap, &a->end_time);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__stop_play_back(struct soap *soap, const struct ns2__stop_play_back *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->user_id);
	soap_serialize_string(soap, (char*const*)&a->target_dev_id);
	soap_serialize_string(soap, (char*const*)&a->target_realm);
	soap_serialize_string(soap, (char*const*)&a->media_recv_ip);
	soap_serialize_string(soap, (char*const*)&a->start_time);
	soap_serialize_string(soap, (char*const*)&a->end_time);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__stop_play_back(struct soap *soap, const char *tag, int id, const struct ns2__stop_play_back *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__stop_play_back), type))
		return soap->error;
	if (soap_out_string(soap, "user-id", -1, (char*const*)&a->user_id, ""))
		return soap->error;
	if (soap_out_string(soap, "target-dev-id", -1, (char*const*)&a->target_dev_id, ""))
		return soap->error;
	if (soap_out_string(soap, "target-realm", -1, (char*const*)&a->target_realm, ""))
		return soap->error;
	if (soap_out_string(soap, "media-recv-ip", -1, (char*const*)&a->media_recv_ip, ""))
		return soap->error;
	if (soap_out_int(soap, "media-recv-port", -1, &a->media_recv_port, ""))
		return soap->error;
	if (soap_out_string(soap, "start-time", -1, (char*const*)&a->start_time, ""))
		return soap->error;
	if (soap_out_string(soap, "end-time", -1, (char*const*)&a->end_time, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__stop_play_back * SOAP_FMAC4 soap_in_ns2__stop_play_back(struct soap *soap, const char *tag, struct ns2__stop_play_back *a, const char *type)
{
	size_t soap_flag_user_id = 1;
	size_t soap_flag_target_dev_id = 1;
	size_t soap_flag_target_realm = 1;
	size_t soap_flag_media_recv_ip = 1;
	size_t soap_flag_media_recv_port = 1;
	size_t soap_flag_start_time = 1;
	size_t soap_flag_end_time = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__stop_play_back *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__stop_play_back, sizeof(struct ns2__stop_play_back), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__stop_play_back(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_user_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "user-id", (char**)&a->user_id, "xsd:string"))
				{	soap_flag_user_id--;
					continue;
				}
			}
			if (soap_flag_target_dev_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "target-dev-id", (char**)&a->target_dev_id, "xsd:string"))
				{	soap_flag_target_dev_id--;
					continue;
				}
			}
			if (soap_flag_target_realm && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "target-realm", (char**)&a->target_realm, "xsd:string"))
				{	soap_flag_target_realm--;
					continue;
				}
			}
			if (soap_flag_media_recv_ip && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "media-recv-ip", (char**)&a->media_recv_ip, "xsd:string"))
				{	soap_flag_media_recv_ip--;
					continue;
				}
			}
			if (soap_flag_media_recv_port && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "media-recv-port", &a->media_recv_port, "xsd:int"))
				{	soap_flag_media_recv_port--;
					continue;
				}
			}
			if (soap_flag_start_time && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "start-time", (char**)&a->start_time, "xsd:string"))
				{	soap_flag_start_time--;
					continue;
				}
			}
			if (soap_flag_end_time && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "end-time", (char**)&a->end_time, "xsd:string"))
				{	soap_flag_end_time--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_media_recv_port > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__stop_play_back *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__stop_play_back, SOAP_TYPE_ns2__stop_play_back, sizeof(struct ns2__stop_play_back), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__stop_play_back * SOAP_FMAC2 sipgw_instantiate_ns2__stop_play_back(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_ns2__stop_play_back(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__stop_play_back *p;
	size_t k = sizeof(struct ns2__stop_play_back);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__stop_play_back, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__stop_play_back);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__stop_play_back, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__stop_play_back location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__stop_play_back(struct soap *soap, const struct ns2__stop_play_back *a, const char *tag, const char *type)
{
	if (soap_out_ns2__stop_play_back(soap, tag ? tag : "ns2:stop-play-back", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__stop_play_back * SOAP_FMAC4 soap_get_ns2__stop_play_back(struct soap *soap, struct ns2__stop_play_back *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__stop_play_back(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__stop_play_backResponse(struct soap *soap, struct ns2__stop_play_backResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__stop_play_backResponse(struct soap *soap, const struct ns2__stop_play_backResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__stop_play_backResponse(struct soap *soap, const char *tag, int id, const struct ns2__stop_play_backResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__stop_play_backResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__stop_play_backResponse * SOAP_FMAC4 soap_in_ns2__stop_play_backResponse(struct soap *soap, const char *tag, struct ns2__stop_play_backResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__stop_play_backResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__stop_play_backResponse, sizeof(struct ns2__stop_play_backResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__stop_play_backResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__stop_play_backResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__stop_play_backResponse, SOAP_TYPE_ns2__stop_play_backResponse, sizeof(struct ns2__stop_play_backResponse), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__stop_play_backResponse * SOAP_FMAC2 sipgw_instantiate_ns2__stop_play_backResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_ns2__stop_play_backResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__stop_play_backResponse *p;
	size_t k = sizeof(struct ns2__stop_play_backResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__stop_play_backResponse, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__stop_play_backResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__stop_play_backResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__stop_play_backResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__stop_play_backResponse(struct soap *soap, const struct ns2__stop_play_backResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__stop_play_backResponse(soap, tag ? tag : "ns2:stop-play-backResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__stop_play_backResponse * SOAP_FMAC4 soap_get_ns2__stop_play_backResponse(struct soap *soap, struct ns2__stop_play_backResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__stop_play_backResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__start_play_back(struct soap *soap, struct ns2__start_play_back *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->user_id);
	soap_default_string(soap, &a->target_dev_id);
	soap_default_string(soap, &a->target_realm);
	soap_default_string(soap, &a->media_recv_ip);
	soap_default_int(soap, &a->media_recv_port);
	soap_default_string(soap, &a->start_time);
	soap_default_string(soap, &a->end_time);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__start_play_back(struct soap *soap, const struct ns2__start_play_back *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->user_id);
	soap_serialize_string(soap, (char*const*)&a->target_dev_id);
	soap_serialize_string(soap, (char*const*)&a->target_realm);
	soap_serialize_string(soap, (char*const*)&a->media_recv_ip);
	soap_serialize_string(soap, (char*const*)&a->start_time);
	soap_serialize_string(soap, (char*const*)&a->end_time);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__start_play_back(struct soap *soap, const char *tag, int id, const struct ns2__start_play_back *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__start_play_back), type))
		return soap->error;
	if (soap_out_string(soap, "user-id", -1, (char*const*)&a->user_id, ""))
		return soap->error;
	if (soap_out_string(soap, "target-dev-id", -1, (char*const*)&a->target_dev_id, ""))
		return soap->error;
	if (soap_out_string(soap, "target-realm", -1, (char*const*)&a->target_realm, ""))
		return soap->error;
	if (soap_out_string(soap, "media-recv-ip", -1, (char*const*)&a->media_recv_ip, ""))
		return soap->error;
	if (soap_out_int(soap, "media-recv-port", -1, &a->media_recv_port, ""))
		return soap->error;
	if (soap_out_string(soap, "start-time", -1, (char*const*)&a->start_time, ""))
		return soap->error;
	if (soap_out_string(soap, "end-time", -1, (char*const*)&a->end_time, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__start_play_back * SOAP_FMAC4 soap_in_ns2__start_play_back(struct soap *soap, const char *tag, struct ns2__start_play_back *a, const char *type)
{
	size_t soap_flag_user_id = 1;
	size_t soap_flag_target_dev_id = 1;
	size_t soap_flag_target_realm = 1;
	size_t soap_flag_media_recv_ip = 1;
	size_t soap_flag_media_recv_port = 1;
	size_t soap_flag_start_time = 1;
	size_t soap_flag_end_time = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__start_play_back *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__start_play_back, sizeof(struct ns2__start_play_back), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__start_play_back(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_user_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "user-id", (char**)&a->user_id, "xsd:string"))
				{	soap_flag_user_id--;
					continue;
				}
			}
			if (soap_flag_target_dev_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "target-dev-id", (char**)&a->target_dev_id, "xsd:string"))
				{	soap_flag_target_dev_id--;
					continue;
				}
			}
			if (soap_flag_target_realm && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "target-realm", (char**)&a->target_realm, "xsd:string"))
				{	soap_flag_target_realm--;
					continue;
				}
			}
			if (soap_flag_media_recv_ip && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "media-recv-ip", (char**)&a->media_recv_ip, "xsd:string"))
				{	soap_flag_media_recv_ip--;
					continue;
				}
			}
			if (soap_flag_media_recv_port && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "media-recv-port", &a->media_recv_port, "xsd:int"))
				{	soap_flag_media_recv_port--;
					continue;
				}
			}
			if (soap_flag_start_time && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "start-time", (char**)&a->start_time, "xsd:string"))
				{	soap_flag_start_time--;
					continue;
				}
			}
			if (soap_flag_end_time && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "end-time", (char**)&a->end_time, "xsd:string"))
				{	soap_flag_end_time--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_media_recv_port > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__start_play_back *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__start_play_back, SOAP_TYPE_ns2__start_play_back, sizeof(struct ns2__start_play_back), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__start_play_back * SOAP_FMAC2 sipgw_instantiate_ns2__start_play_back(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_ns2__start_play_back(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__start_play_back *p;
	size_t k = sizeof(struct ns2__start_play_back);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__start_play_back, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__start_play_back);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__start_play_back, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__start_play_back location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__start_play_back(struct soap *soap, const struct ns2__start_play_back *a, const char *tag, const char *type)
{
	if (soap_out_ns2__start_play_back(soap, tag ? tag : "ns2:start-play-back", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__start_play_back * SOAP_FMAC4 soap_get_ns2__start_play_back(struct soap *soap, struct ns2__start_play_back *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__start_play_back(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__start_play_backResponse(struct soap *soap, struct ns2__start_play_backResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__start_play_backResponse(struct soap *soap, const struct ns2__start_play_backResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__start_play_backResponse(struct soap *soap, const char *tag, int id, const struct ns2__start_play_backResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__start_play_backResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__start_play_backResponse * SOAP_FMAC4 soap_in_ns2__start_play_backResponse(struct soap *soap, const char *tag, struct ns2__start_play_backResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__start_play_backResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__start_play_backResponse, sizeof(struct ns2__start_play_backResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__start_play_backResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__start_play_backResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__start_play_backResponse, SOAP_TYPE_ns2__start_play_backResponse, sizeof(struct ns2__start_play_backResponse), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__start_play_backResponse * SOAP_FMAC2 sipgw_instantiate_ns2__start_play_backResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_ns2__start_play_backResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__start_play_backResponse *p;
	size_t k = sizeof(struct ns2__start_play_backResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__start_play_backResponse, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__start_play_backResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__start_play_backResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__start_play_backResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__start_play_backResponse(struct soap *soap, const struct ns2__start_play_backResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__start_play_backResponse(soap, tag ? tag : "ns2:start-play-backResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__start_play_backResponse * SOAP_FMAC4 soap_get_ns2__start_play_backResponse(struct soap *soap, struct ns2__start_play_backResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__start_play_backResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__stop_real_play(struct soap *soap, struct ns2__stop_real_play *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->user_id);
	soap_default_string(soap, &a->target_dev_id);
	soap_default_string(soap, &a->target_realm);
	soap_default_string(soap, &a->media_recv_ip);
	soap_default_int(soap, &a->media_recv_port);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__stop_real_play(struct soap *soap, const struct ns2__stop_real_play *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->user_id);
	soap_serialize_string(soap, (char*const*)&a->target_dev_id);
	soap_serialize_string(soap, (char*const*)&a->target_realm);
	soap_serialize_string(soap, (char*const*)&a->media_recv_ip);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__stop_real_play(struct soap *soap, const char *tag, int id, const struct ns2__stop_real_play *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__stop_real_play), type))
		return soap->error;
	if (soap_out_string(soap, "user-id", -1, (char*const*)&a->user_id, ""))
		return soap->error;
	if (soap_out_string(soap, "target-dev-id", -1, (char*const*)&a->target_dev_id, ""))
		return soap->error;
	if (soap_out_string(soap, "target-realm", -1, (char*const*)&a->target_realm, ""))
		return soap->error;
	if (soap_out_string(soap, "media-recv-ip", -1, (char*const*)&a->media_recv_ip, ""))
		return soap->error;
	if (soap_out_int(soap, "media-recv-port", -1, &a->media_recv_port, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__stop_real_play * SOAP_FMAC4 soap_in_ns2__stop_real_play(struct soap *soap, const char *tag, struct ns2__stop_real_play *a, const char *type)
{
	size_t soap_flag_user_id = 1;
	size_t soap_flag_target_dev_id = 1;
	size_t soap_flag_target_realm = 1;
	size_t soap_flag_media_recv_ip = 1;
	size_t soap_flag_media_recv_port = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__stop_real_play *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__stop_real_play, sizeof(struct ns2__stop_real_play), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__stop_real_play(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_user_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "user-id", (char**)&a->user_id, "xsd:string"))
				{	soap_flag_user_id--;
					continue;
				}
			}
			if (soap_flag_target_dev_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "target-dev-id", (char**)&a->target_dev_id, "xsd:string"))
				{	soap_flag_target_dev_id--;
					continue;
				}
			}
			if (soap_flag_target_realm && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "target-realm", (char**)&a->target_realm, "xsd:string"))
				{	soap_flag_target_realm--;
					continue;
				}
			}
			if (soap_flag_media_recv_ip && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "media-recv-ip", (char**)&a->media_recv_ip, "xsd:string"))
				{	soap_flag_media_recv_ip--;
					continue;
				}
			}
			if (soap_flag_media_recv_port && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "media-recv-port", &a->media_recv_port, "xsd:int"))
				{	soap_flag_media_recv_port--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_media_recv_port > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__stop_real_play *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__stop_real_play, SOAP_TYPE_ns2__stop_real_play, sizeof(struct ns2__stop_real_play), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__stop_real_play * SOAP_FMAC2 sipgw_instantiate_ns2__stop_real_play(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_ns2__stop_real_play(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__stop_real_play *p;
	size_t k = sizeof(struct ns2__stop_real_play);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__stop_real_play, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__stop_real_play);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__stop_real_play, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__stop_real_play location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__stop_real_play(struct soap *soap, const struct ns2__stop_real_play *a, const char *tag, const char *type)
{
	if (soap_out_ns2__stop_real_play(soap, tag ? tag : "ns2:stop-real-play", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__stop_real_play * SOAP_FMAC4 soap_get_ns2__stop_real_play(struct soap *soap, struct ns2__stop_real_play *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__stop_real_play(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__stop_real_playResponse(struct soap *soap, struct ns2__stop_real_playResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__stop_real_playResponse(struct soap *soap, const struct ns2__stop_real_playResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__stop_real_playResponse(struct soap *soap, const char *tag, int id, const struct ns2__stop_real_playResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__stop_real_playResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__stop_real_playResponse * SOAP_FMAC4 soap_in_ns2__stop_real_playResponse(struct soap *soap, const char *tag, struct ns2__stop_real_playResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__stop_real_playResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__stop_real_playResponse, sizeof(struct ns2__stop_real_playResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__stop_real_playResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__stop_real_playResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__stop_real_playResponse, SOAP_TYPE_ns2__stop_real_playResponse, sizeof(struct ns2__stop_real_playResponse), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__stop_real_playResponse * SOAP_FMAC2 sipgw_instantiate_ns2__stop_real_playResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_ns2__stop_real_playResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__stop_real_playResponse *p;
	size_t k = sizeof(struct ns2__stop_real_playResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__stop_real_playResponse, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__stop_real_playResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__stop_real_playResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__stop_real_playResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__stop_real_playResponse(struct soap *soap, const struct ns2__stop_real_playResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__stop_real_playResponse(soap, tag ? tag : "ns2:stop-real-playResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__stop_real_playResponse * SOAP_FMAC4 soap_get_ns2__stop_real_playResponse(struct soap *soap, struct ns2__stop_real_playResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__stop_real_playResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__start_real_play(struct soap *soap, struct ns2__start_real_play *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->user_id);
	soap_default_string(soap, &a->target_dev_id);
	soap_default_string(soap, &a->target_realm);
	soap_default_string(soap, &a->media_recv_ip);
	soap_default_int(soap, &a->media_recv_port);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__start_real_play(struct soap *soap, const struct ns2__start_real_play *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->user_id);
	soap_serialize_string(soap, (char*const*)&a->target_dev_id);
	soap_serialize_string(soap, (char*const*)&a->target_realm);
	soap_serialize_string(soap, (char*const*)&a->media_recv_ip);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__start_real_play(struct soap *soap, const char *tag, int id, const struct ns2__start_real_play *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__start_real_play), type))
		return soap->error;
	if (soap_out_string(soap, "user-id", -1, (char*const*)&a->user_id, ""))
		return soap->error;
	if (soap_out_string(soap, "target-dev-id", -1, (char*const*)&a->target_dev_id, ""))
		return soap->error;
	if (soap_out_string(soap, "target-realm", -1, (char*const*)&a->target_realm, ""))
		return soap->error;
	if (soap_out_string(soap, "media-recv-ip", -1, (char*const*)&a->media_recv_ip, ""))
		return soap->error;
	if (soap_out_int(soap, "media-recv-port", -1, &a->media_recv_port, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__start_real_play * SOAP_FMAC4 soap_in_ns2__start_real_play(struct soap *soap, const char *tag, struct ns2__start_real_play *a, const char *type)
{
	size_t soap_flag_user_id = 1;
	size_t soap_flag_target_dev_id = 1;
	size_t soap_flag_target_realm = 1;
	size_t soap_flag_media_recv_ip = 1;
	size_t soap_flag_media_recv_port = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__start_real_play *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__start_real_play, sizeof(struct ns2__start_real_play), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__start_real_play(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_user_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "user-id", (char**)&a->user_id, "xsd:string"))
				{	soap_flag_user_id--;
					continue;
				}
			}
			if (soap_flag_target_dev_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "target-dev-id", (char**)&a->target_dev_id, "xsd:string"))
				{	soap_flag_target_dev_id--;
					continue;
				}
			}
			if (soap_flag_target_realm && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "target-realm", (char**)&a->target_realm, "xsd:string"))
				{	soap_flag_target_realm--;
					continue;
				}
			}
			if (soap_flag_media_recv_ip && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "media-recv-ip", (char**)&a->media_recv_ip, "xsd:string"))
				{	soap_flag_media_recv_ip--;
					continue;
				}
			}
			if (soap_flag_media_recv_port && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "media-recv-port", &a->media_recv_port, "xsd:int"))
				{	soap_flag_media_recv_port--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_media_recv_port > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__start_real_play *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__start_real_play, SOAP_TYPE_ns2__start_real_play, sizeof(struct ns2__start_real_play), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__start_real_play * SOAP_FMAC2 sipgw_instantiate_ns2__start_real_play(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_ns2__start_real_play(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__start_real_play *p;
	size_t k = sizeof(struct ns2__start_real_play);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__start_real_play, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__start_real_play);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__start_real_play, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__start_real_play location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__start_real_play(struct soap *soap, const struct ns2__start_real_play *a, const char *tag, const char *type)
{
	if (soap_out_ns2__start_real_play(soap, tag ? tag : "ns2:start-real-play", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__start_real_play * SOAP_FMAC4 soap_get_ns2__start_real_play(struct soap *soap, struct ns2__start_real_play *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__start_real_play(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__start_real_playResponse(struct soap *soap, struct ns2__start_real_playResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__start_real_playResponse(struct soap *soap, const struct ns2__start_real_playResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__start_real_playResponse(struct soap *soap, const char *tag, int id, const struct ns2__start_real_playResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__start_real_playResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__start_real_playResponse * SOAP_FMAC4 soap_in_ns2__start_real_playResponse(struct soap *soap, const char *tag, struct ns2__start_real_playResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__start_real_playResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__start_real_playResponse, sizeof(struct ns2__start_real_playResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__start_real_playResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__start_real_playResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__start_real_playResponse, SOAP_TYPE_ns2__start_real_playResponse, sizeof(struct ns2__start_real_playResponse), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__start_real_playResponse * SOAP_FMAC2 sipgw_instantiate_ns2__start_real_playResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_ns2__start_real_playResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__start_real_playResponse *p;
	size_t k = sizeof(struct ns2__start_real_playResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__start_real_playResponse, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__start_real_playResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__start_real_playResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__start_real_playResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__start_real_playResponse(struct soap *soap, const struct ns2__start_real_playResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__start_real_playResponse(soap, tag ? tag : "ns2:start-real-playResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__start_real_playResponse * SOAP_FMAC4 soap_get_ns2__start_real_playResponse(struct soap *soap, struct ns2__start_real_playResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__start_real_playResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ptz_control(struct soap *soap, struct ns2__ptz_control *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->target_dev_id);
	soap_default_string(soap, &a->target_realm);
	soap_default_int(soap, &a->ptz);
	soap_default_int(soap, &a->ptz_speed);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__ptz_control(struct soap *soap, const struct ns2__ptz_control *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->target_dev_id);
	soap_serialize_string(soap, (char*const*)&a->target_realm);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ptz_control(struct soap *soap, const char *tag, int id, const struct ns2__ptz_control *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__ptz_control), type))
		return soap->error;
	if (soap_out_string(soap, "target-dev-id", -1, (char*const*)&a->target_dev_id, ""))
		return soap->error;
	if (soap_out_string(soap, "target-realm", -1, (char*const*)&a->target_realm, ""))
		return soap->error;
	if (soap_out_int(soap, "ptz", -1, &a->ptz, ""))
		return soap->error;
	if (soap_out_int(soap, "ptz-speed", -1, &a->ptz_speed, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__ptz_control * SOAP_FMAC4 soap_in_ns2__ptz_control(struct soap *soap, const char *tag, struct ns2__ptz_control *a, const char *type)
{
	size_t soap_flag_target_dev_id = 1;
	size_t soap_flag_target_realm = 1;
	size_t soap_flag_ptz = 1;
	size_t soap_flag_ptz_speed = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__ptz_control *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__ptz_control, sizeof(struct ns2__ptz_control), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__ptz_control(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_target_dev_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "target-dev-id", (char**)&a->target_dev_id, "xsd:string"))
				{	soap_flag_target_dev_id--;
					continue;
				}
			}
			if (soap_flag_target_realm && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "target-realm", (char**)&a->target_realm, "xsd:string"))
				{	soap_flag_target_realm--;
					continue;
				}
			}
			if (soap_flag_ptz && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "ptz", &a->ptz, "xsd:int"))
				{	soap_flag_ptz--;
					continue;
				}
			}
			if (soap_flag_ptz_speed && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "ptz-speed", &a->ptz_speed, "xsd:int"))
				{	soap_flag_ptz_speed--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ptz > 0 || soap_flag_ptz_speed > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__ptz_control *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__ptz_control, SOAP_TYPE_ns2__ptz_control, sizeof(struct ns2__ptz_control), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__ptz_control * SOAP_FMAC2 sipgw_instantiate_ns2__ptz_control(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_ns2__ptz_control(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__ptz_control *p;
	size_t k = sizeof(struct ns2__ptz_control);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__ptz_control, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__ptz_control);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__ptz_control, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__ptz_control location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ptz_control(struct soap *soap, const struct ns2__ptz_control *a, const char *tag, const char *type)
{
	if (soap_out_ns2__ptz_control(soap, tag ? tag : "ns2:ptz-control", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__ptz_control * SOAP_FMAC4 soap_get_ns2__ptz_control(struct soap *soap, struct ns2__ptz_control *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__ptz_control(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ptz_controlResponse(struct soap *soap, struct ns2__ptz_controlResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__ptz_controlResponse(struct soap *soap, const struct ns2__ptz_controlResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ptz_controlResponse(struct soap *soap, const char *tag, int id, const struct ns2__ptz_controlResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__ptz_controlResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__ptz_controlResponse * SOAP_FMAC4 soap_in_ns2__ptz_controlResponse(struct soap *soap, const char *tag, struct ns2__ptz_controlResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__ptz_controlResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__ptz_controlResponse, sizeof(struct ns2__ptz_controlResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__ptz_controlResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__ptz_controlResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__ptz_controlResponse, SOAP_TYPE_ns2__ptz_controlResponse, sizeof(struct ns2__ptz_controlResponse), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__ptz_controlResponse * SOAP_FMAC2 sipgw_instantiate_ns2__ptz_controlResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_ns2__ptz_controlResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__ptz_controlResponse *p;
	size_t k = sizeof(struct ns2__ptz_controlResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__ptz_controlResponse, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__ptz_controlResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__ptz_controlResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__ptz_controlResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ptz_controlResponse(struct soap *soap, const struct ns2__ptz_controlResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__ptz_controlResponse(soap, tag ? tag : "ns2:ptz-controlResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__ptz_controlResponse * SOAP_FMAC4 soap_get_ns2__ptz_controlResponse(struct soap *soap, struct ns2__ptz_controlResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__ptz_controlResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__get_directory_info(struct soap *soap, struct ns2__get_directory_info *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->target_dev_id);
	soap_default_string(soap, &a->target_realm);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__get_directory_info(struct soap *soap, const struct ns2__get_directory_info *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->target_dev_id);
	soap_serialize_string(soap, (char*const*)&a->target_realm);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__get_directory_info(struct soap *soap, const char *tag, int id, const struct ns2__get_directory_info *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__get_directory_info), type))
		return soap->error;
	if (soap_out_string(soap, "target-dev-id", -1, (char*const*)&a->target_dev_id, ""))
		return soap->error;
	if (soap_out_string(soap, "target-realm", -1, (char*const*)&a->target_realm, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__get_directory_info * SOAP_FMAC4 soap_in_ns2__get_directory_info(struct soap *soap, const char *tag, struct ns2__get_directory_info *a, const char *type)
{
	size_t soap_flag_target_dev_id = 1;
	size_t soap_flag_target_realm = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__get_directory_info *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__get_directory_info, sizeof(struct ns2__get_directory_info), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__get_directory_info(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_target_dev_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "target-dev-id", (char**)&a->target_dev_id, "xsd:string"))
				{	soap_flag_target_dev_id--;
					continue;
				}
			}
			if (soap_flag_target_realm && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "target-realm", (char**)&a->target_realm, "xsd:string"))
				{	soap_flag_target_realm--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__get_directory_info *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__get_directory_info, SOAP_TYPE_ns2__get_directory_info, sizeof(struct ns2__get_directory_info), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__get_directory_info * SOAP_FMAC2 sipgw_instantiate_ns2__get_directory_info(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_ns2__get_directory_info(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__get_directory_info *p;
	size_t k = sizeof(struct ns2__get_directory_info);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__get_directory_info, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__get_directory_info);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__get_directory_info, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__get_directory_info location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__get_directory_info(struct soap *soap, const struct ns2__get_directory_info *a, const char *tag, const char *type)
{
	if (soap_out_ns2__get_directory_info(soap, tag ? tag : "ns2:get-directory-info", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__get_directory_info * SOAP_FMAC4 soap_get_ns2__get_directory_info(struct soap *soap, struct ns2__get_directory_info *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__get_directory_info(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__get_directory_infoResponse(struct soap *soap, struct ns2__get_directory_infoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->directory_info_buf_out = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__get_directory_infoResponse(struct soap *soap, const struct ns2__get_directory_infoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostring(soap, &a->directory_info_buf_out);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__get_directory_infoResponse(struct soap *soap, const char *tag, int id, const struct ns2__get_directory_infoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__get_directory_infoResponse), type))
		return soap->error;
	if (soap_out_PointerTostring(soap, "directory-info-buf-out", -1, &a->directory_info_buf_out, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__get_directory_infoResponse * SOAP_FMAC4 soap_in_ns2__get_directory_infoResponse(struct soap *soap, const char *tag, struct ns2__get_directory_infoResponse *a, const char *type)
{
	size_t soap_flag_directory_info_buf_out = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__get_directory_infoResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__get_directory_infoResponse, sizeof(struct ns2__get_directory_infoResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__get_directory_infoResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_directory_info_buf_out && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTostring(soap, "directory-info-buf-out", &a->directory_info_buf_out, "xsd:string"))
				{	soap_flag_directory_info_buf_out--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__get_directory_infoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__get_directory_infoResponse, SOAP_TYPE_ns2__get_directory_infoResponse, sizeof(struct ns2__get_directory_infoResponse), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__get_directory_infoResponse * SOAP_FMAC2 sipgw_instantiate_ns2__get_directory_infoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_ns2__get_directory_infoResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__get_directory_infoResponse *p;
	size_t k = sizeof(struct ns2__get_directory_infoResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__get_directory_infoResponse, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__get_directory_infoResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__get_directory_infoResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__get_directory_infoResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__get_directory_infoResponse(struct soap *soap, const struct ns2__get_directory_infoResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__get_directory_infoResponse(soap, tag ? tag : "ns2:get-directory-infoResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__get_directory_infoResponse * SOAP_FMAC4 soap_get_ns2__get_directory_infoResponse(struct soap *soap, struct ns2__get_directory_infoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__get_directory_infoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__keepalive(struct soap *soap, struct ns2__keepalive *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->user_id);
	soap_default_string(soap, &a->password);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__keepalive(struct soap *soap, const struct ns2__keepalive *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->user_id);
	soap_serialize_string(soap, (char*const*)&a->password);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__keepalive(struct soap *soap, const char *tag, int id, const struct ns2__keepalive *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__keepalive), type))
		return soap->error;
	if (soap_out_string(soap, "user-id", -1, (char*const*)&a->user_id, ""))
		return soap->error;
	if (soap_out_string(soap, "password", -1, (char*const*)&a->password, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__keepalive * SOAP_FMAC4 soap_in_ns2__keepalive(struct soap *soap, const char *tag, struct ns2__keepalive *a, const char *type)
{
	size_t soap_flag_user_id = 1;
	size_t soap_flag_password = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__keepalive *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__keepalive, sizeof(struct ns2__keepalive), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__keepalive(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_user_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "user-id", (char**)&a->user_id, "xsd:string"))
				{	soap_flag_user_id--;
					continue;
				}
			}
			if (soap_flag_password && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "password", (char**)&a->password, "xsd:string"))
				{	soap_flag_password--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__keepalive *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__keepalive, SOAP_TYPE_ns2__keepalive, sizeof(struct ns2__keepalive), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__keepalive * SOAP_FMAC2 sipgw_instantiate_ns2__keepalive(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_ns2__keepalive(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__keepalive *p;
	size_t k = sizeof(struct ns2__keepalive);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__keepalive, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__keepalive);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__keepalive, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__keepalive location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__keepalive(struct soap *soap, const struct ns2__keepalive *a, const char *tag, const char *type)
{
	if (soap_out_ns2__keepalive(soap, tag ? tag : "ns2:keepalive", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__keepalive * SOAP_FMAC4 soap_get_ns2__keepalive(struct soap *soap, struct ns2__keepalive *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__keepalive(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__keepaliveResponse(struct soap *soap, struct ns2__keepaliveResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__keepaliveResponse(struct soap *soap, const struct ns2__keepaliveResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__keepaliveResponse(struct soap *soap, const char *tag, int id, const struct ns2__keepaliveResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__keepaliveResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__keepaliveResponse * SOAP_FMAC4 soap_in_ns2__keepaliveResponse(struct soap *soap, const char *tag, struct ns2__keepaliveResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__keepaliveResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__keepaliveResponse, sizeof(struct ns2__keepaliveResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__keepaliveResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__keepaliveResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__keepaliveResponse, SOAP_TYPE_ns2__keepaliveResponse, sizeof(struct ns2__keepaliveResponse), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__keepaliveResponse * SOAP_FMAC2 sipgw_instantiate_ns2__keepaliveResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_ns2__keepaliveResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__keepaliveResponse *p;
	size_t k = sizeof(struct ns2__keepaliveResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__keepaliveResponse, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__keepaliveResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__keepaliveResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__keepaliveResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__keepaliveResponse(struct soap *soap, const struct ns2__keepaliveResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__keepaliveResponse(soap, tag ? tag : "ns2:keepaliveResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__keepaliveResponse * SOAP_FMAC4 soap_get_ns2__keepaliveResponse(struct soap *soap, struct ns2__keepaliveResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__keepaliveResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__logout(struct soap *soap, struct ns2__logout *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->user_id);
	soap_default_string(soap, &a->password);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__logout(struct soap *soap, const struct ns2__logout *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->user_id);
	soap_serialize_string(soap, (char*const*)&a->password);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__logout(struct soap *soap, const char *tag, int id, const struct ns2__logout *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__logout), type))
		return soap->error;
	if (soap_out_string(soap, "user-id", -1, (char*const*)&a->user_id, ""))
		return soap->error;
	if (soap_out_string(soap, "password", -1, (char*const*)&a->password, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__logout * SOAP_FMAC4 soap_in_ns2__logout(struct soap *soap, const char *tag, struct ns2__logout *a, const char *type)
{
	size_t soap_flag_user_id = 1;
	size_t soap_flag_password = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__logout *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__logout, sizeof(struct ns2__logout), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__logout(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_user_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "user-id", (char**)&a->user_id, "xsd:string"))
				{	soap_flag_user_id--;
					continue;
				}
			}
			if (soap_flag_password && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "password", (char**)&a->password, "xsd:string"))
				{	soap_flag_password--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__logout *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__logout, SOAP_TYPE_ns2__logout, sizeof(struct ns2__logout), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__logout * SOAP_FMAC2 sipgw_instantiate_ns2__logout(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_ns2__logout(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__logout *p;
	size_t k = sizeof(struct ns2__logout);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__logout, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__logout);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__logout, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__logout location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__logout(struct soap *soap, const struct ns2__logout *a, const char *tag, const char *type)
{
	if (soap_out_ns2__logout(soap, tag ? tag : "ns2:logout", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__logout * SOAP_FMAC4 soap_get_ns2__logout(struct soap *soap, struct ns2__logout *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__logout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__logoutResponse(struct soap *soap, struct ns2__logoutResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__logoutResponse(struct soap *soap, const struct ns2__logoutResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__logoutResponse(struct soap *soap, const char *tag, int id, const struct ns2__logoutResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__logoutResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__logoutResponse * SOAP_FMAC4 soap_in_ns2__logoutResponse(struct soap *soap, const char *tag, struct ns2__logoutResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__logoutResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__logoutResponse, sizeof(struct ns2__logoutResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__logoutResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__logoutResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__logoutResponse, SOAP_TYPE_ns2__logoutResponse, sizeof(struct ns2__logoutResponse), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__logoutResponse * SOAP_FMAC2 sipgw_instantiate_ns2__logoutResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_ns2__logoutResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__logoutResponse *p;
	size_t k = sizeof(struct ns2__logoutResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__logoutResponse, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__logoutResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__logoutResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__logoutResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__logoutResponse(struct soap *soap, const struct ns2__logoutResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__logoutResponse(soap, tag ? tag : "ns2:logoutResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__logoutResponse * SOAP_FMAC4 soap_get_ns2__logoutResponse(struct soap *soap, struct ns2__logoutResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__logoutResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__login(struct soap *soap, struct ns2__login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->user_id);
	soap_default_string(soap, &a->password);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__login(struct soap *soap, const struct ns2__login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->user_id);
	soap_serialize_string(soap, (char*const*)&a->password);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__login(struct soap *soap, const char *tag, int id, const struct ns2__login *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__login), type))
		return soap->error;
	if (soap_out_string(soap, "user-id", -1, (char*const*)&a->user_id, ""))
		return soap->error;
	if (soap_out_string(soap, "password", -1, (char*const*)&a->password, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__login * SOAP_FMAC4 soap_in_ns2__login(struct soap *soap, const char *tag, struct ns2__login *a, const char *type)
{
	size_t soap_flag_user_id = 1;
	size_t soap_flag_password = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__login *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__login, sizeof(struct ns2__login), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__login(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_user_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "user-id", (char**)&a->user_id, "xsd:string"))
				{	soap_flag_user_id--;
					continue;
				}
			}
			if (soap_flag_password && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "password", (char**)&a->password, "xsd:string"))
				{	soap_flag_password--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__login *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__login, SOAP_TYPE_ns2__login, sizeof(struct ns2__login), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__login * SOAP_FMAC2 sipgw_instantiate_ns2__login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_ns2__login(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__login *p;
	size_t k = sizeof(struct ns2__login);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__login, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__login);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__login, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__login location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__login(struct soap *soap, const struct ns2__login *a, const char *tag, const char *type)
{
	if (soap_out_ns2__login(soap, tag ? tag : "ns2:login", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__login * SOAP_FMAC4 soap_get_ns2__login(struct soap *soap, struct ns2__login *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__loginResponse(struct soap *soap, struct ns2__loginResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->result);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__loginResponse(struct soap *soap, const struct ns2__loginResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__loginResponse(struct soap *soap, const char *tag, int id, const struct ns2__loginResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__loginResponse), type))
		return soap->error;
	if (soap_out_int(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__loginResponse * SOAP_FMAC4 soap_in_ns2__loginResponse(struct soap *soap, const char *tag, struct ns2__loginResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__loginResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__loginResponse, sizeof(struct ns2__loginResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__loginResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_result > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct ns2__loginResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__loginResponse, SOAP_TYPE_ns2__loginResponse, sizeof(struct ns2__loginResponse), 0, sipgw_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct ns2__loginResponse * SOAP_FMAC2 sipgw_instantiate_ns2__loginResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "sipgw_instantiate_ns2__loginResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct ns2__loginResponse *p;
	size_t k = sizeof(struct ns2__loginResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_ns2__loginResponse, n, sipgw_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct ns2__loginResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct ns2__loginResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct ns2__loginResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__loginResponse(struct soap *soap, const struct ns2__loginResponse *a, const char *tag, const char *type)
{
	if (soap_out_ns2__loginResponse(soap, tag ? tag : "ns2:loginResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__loginResponse * SOAP_FMAC4 soap_get_ns2__loginResponse(struct soap *soap, struct ns2__loginResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__loginResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap *soap, char **const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_string))
		soap_serialize_string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap *soap, const char *tag, int id, char **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_string, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_string(soap, tag, id, *a, type);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap *soap, const char *tag, char ***a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (char ***)soap_malloc(soap, sizeof(char **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (char ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_string, sizeof(char *), 1, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap *soap, char **const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostring(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap *soap, char ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of sipgwC.cpp */
