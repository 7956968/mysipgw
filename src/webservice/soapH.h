/* soapH.h
   Generated by gSOAP 2.8.70 for webservice_source.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE_ns2__call_lookup_DEFINED
#define SOAP_TYPE_ns2__call_lookup_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__call_lookup(struct soap*, struct ns2__call_lookup *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__call_lookup(struct soap*, const struct ns2__call_lookup *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__call_lookup(struct soap*, const char*, int, const struct ns2__call_lookup *, const char*);
SOAP_FMAC3 struct ns2__call_lookup * SOAP_FMAC4 soap_in_ns2__call_lookup(struct soap*, const char*, struct ns2__call_lookup *, const char*);
SOAP_FMAC1 struct ns2__call_lookup * SOAP_FMAC2 soap_instantiate_ns2__call_lookup(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__call_lookup * soap_new_ns2__call_lookup(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__call_lookup(soap, n, NULL, NULL, NULL);
}

inline struct ns2__call_lookup * soap_new_req_ns2__call_lookup(
	struct soap *soap)
{
	struct ns2__call_lookup *_p = ::soap_new_ns2__call_lookup(soap);
	if (_p)
	{	::soap_default_ns2__call_lookup(soap, _p);
	}
	return _p;
}

inline struct ns2__call_lookup * soap_new_set_ns2__call_lookup(
	struct soap *soap,
	char *user_id)
{
	struct ns2__call_lookup *_p = ::soap_new_ns2__call_lookup(soap);
	if (_p)
	{	::soap_default_ns2__call_lookup(soap, _p);
		_p->user_id = user_id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__call_lookup(struct soap*, const struct ns2__call_lookup *, const char*, const char*);

inline int soap_write_ns2__call_lookup(struct soap *soap, struct ns2__call_lookup const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__call_lookup(soap, p), 0) || ::soap_put_ns2__call_lookup(soap, p, "ns2:call-lookup", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__call_lookup(struct soap *soap, const char *URL, struct ns2__call_lookup const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__call_lookup(soap, p), 0) || ::soap_put_ns2__call_lookup(soap, p, "ns2:call-lookup", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__call_lookup(struct soap *soap, const char *URL, struct ns2__call_lookup const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__call_lookup(soap, p), 0) || ::soap_put_ns2__call_lookup(soap, p, "ns2:call-lookup", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__call_lookup * SOAP_FMAC4 soap_get_ns2__call_lookup(struct soap*, struct ns2__call_lookup *, const char*, const char*);

inline int soap_read_ns2__call_lookup(struct soap *soap, struct ns2__call_lookup *p)
{
	if (p)
	{	::soap_default_ns2__call_lookup(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__call_lookup(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__call_lookup(struct soap *soap, const char *URL, struct ns2__call_lookup *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__call_lookup(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__call_lookup(struct soap *soap, struct ns2__call_lookup *p)
{
	if (::soap_read_ns2__call_lookup(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__call_lookupResponse_DEFINED
#define SOAP_TYPE_ns2__call_lookupResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__call_lookupResponse(struct soap*, struct ns2__call_lookupResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__call_lookupResponse(struct soap*, const struct ns2__call_lookupResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__call_lookupResponse(struct soap*, const char*, int, const struct ns2__call_lookupResponse *, const char*);
SOAP_FMAC3 struct ns2__call_lookupResponse * SOAP_FMAC4 soap_in_ns2__call_lookupResponse(struct soap*, const char*, struct ns2__call_lookupResponse *, const char*);
SOAP_FMAC1 struct ns2__call_lookupResponse * SOAP_FMAC2 soap_instantiate_ns2__call_lookupResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__call_lookupResponse * soap_new_ns2__call_lookupResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__call_lookupResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__call_lookupResponse * soap_new_req_ns2__call_lookupResponse(
	struct soap *soap)
{
	struct ns2__call_lookupResponse *_p = ::soap_new_ns2__call_lookupResponse(soap);
	if (_p)
	{	::soap_default_ns2__call_lookupResponse(soap, _p);
	}
	return _p;
}

inline struct ns2__call_lookupResponse * soap_new_set_ns2__call_lookupResponse(
	struct soap *soap,
	char **result)
{
	struct ns2__call_lookupResponse *_p = ::soap_new_ns2__call_lookupResponse(soap);
	if (_p)
	{	::soap_default_ns2__call_lookupResponse(soap, _p);
		_p->result = result;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__call_lookupResponse(struct soap*, const struct ns2__call_lookupResponse *, const char*, const char*);

inline int soap_write_ns2__call_lookupResponse(struct soap *soap, struct ns2__call_lookupResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__call_lookupResponse(soap, p), 0) || ::soap_put_ns2__call_lookupResponse(soap, p, "ns2:call-lookupResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__call_lookupResponse(struct soap *soap, const char *URL, struct ns2__call_lookupResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__call_lookupResponse(soap, p), 0) || ::soap_put_ns2__call_lookupResponse(soap, p, "ns2:call-lookupResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__call_lookupResponse(struct soap *soap, const char *URL, struct ns2__call_lookupResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__call_lookupResponse(soap, p), 0) || ::soap_put_ns2__call_lookupResponse(soap, p, "ns2:call-lookupResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__call_lookupResponse * SOAP_FMAC4 soap_get_ns2__call_lookupResponse(struct soap*, struct ns2__call_lookupResponse *, const char*, const char*);

inline int soap_read_ns2__call_lookupResponse(struct soap *soap, struct ns2__call_lookupResponse *p)
{
	if (p)
	{	::soap_default_ns2__call_lookupResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__call_lookupResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__call_lookupResponse(struct soap *soap, const char *URL, struct ns2__call_lookupResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__call_lookupResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__call_lookupResponse(struct soap *soap, struct ns2__call_lookupResponse *p)
{
	if (::soap_read_ns2__call_lookupResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__stop_play_back_DEFINED
#define SOAP_TYPE_ns2__stop_play_back_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__stop_play_back(struct soap*, struct ns2__stop_play_back *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__stop_play_back(struct soap*, const struct ns2__stop_play_back *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__stop_play_back(struct soap*, const char*, int, const struct ns2__stop_play_back *, const char*);
SOAP_FMAC3 struct ns2__stop_play_back * SOAP_FMAC4 soap_in_ns2__stop_play_back(struct soap*, const char*, struct ns2__stop_play_back *, const char*);
SOAP_FMAC1 struct ns2__stop_play_back * SOAP_FMAC2 soap_instantiate_ns2__stop_play_back(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__stop_play_back * soap_new_ns2__stop_play_back(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__stop_play_back(soap, n, NULL, NULL, NULL);
}

inline struct ns2__stop_play_back * soap_new_req_ns2__stop_play_back(
	struct soap *soap)
{
	struct ns2__stop_play_back *_p = ::soap_new_ns2__stop_play_back(soap);
	if (_p)
	{	::soap_default_ns2__stop_play_back(soap, _p);
	}
	return _p;
}

inline struct ns2__stop_play_back * soap_new_set_ns2__stop_play_back(
	struct soap *soap,
	char *user_id,
	char *call_id)
{
	struct ns2__stop_play_back *_p = ::soap_new_ns2__stop_play_back(soap);
	if (_p)
	{	::soap_default_ns2__stop_play_back(soap, _p);
		_p->user_id = user_id;
		_p->call_id = call_id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__stop_play_back(struct soap*, const struct ns2__stop_play_back *, const char*, const char*);

inline int soap_write_ns2__stop_play_back(struct soap *soap, struct ns2__stop_play_back const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__stop_play_back(soap, p), 0) || ::soap_put_ns2__stop_play_back(soap, p, "ns2:stop-play-back", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__stop_play_back(struct soap *soap, const char *URL, struct ns2__stop_play_back const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__stop_play_back(soap, p), 0) || ::soap_put_ns2__stop_play_back(soap, p, "ns2:stop-play-back", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__stop_play_back(struct soap *soap, const char *URL, struct ns2__stop_play_back const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__stop_play_back(soap, p), 0) || ::soap_put_ns2__stop_play_back(soap, p, "ns2:stop-play-back", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__stop_play_back * SOAP_FMAC4 soap_get_ns2__stop_play_back(struct soap*, struct ns2__stop_play_back *, const char*, const char*);

inline int soap_read_ns2__stop_play_back(struct soap *soap, struct ns2__stop_play_back *p)
{
	if (p)
	{	::soap_default_ns2__stop_play_back(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__stop_play_back(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__stop_play_back(struct soap *soap, const char *URL, struct ns2__stop_play_back *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__stop_play_back(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__stop_play_back(struct soap *soap, struct ns2__stop_play_back *p)
{
	if (::soap_read_ns2__stop_play_back(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__stop_play_backResponse_DEFINED
#define SOAP_TYPE_ns2__stop_play_backResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__stop_play_backResponse(struct soap*, struct ns2__stop_play_backResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__stop_play_backResponse(struct soap*, const struct ns2__stop_play_backResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__stop_play_backResponse(struct soap*, const char*, int, const struct ns2__stop_play_backResponse *, const char*);
SOAP_FMAC3 struct ns2__stop_play_backResponse * SOAP_FMAC4 soap_in_ns2__stop_play_backResponse(struct soap*, const char*, struct ns2__stop_play_backResponse *, const char*);
SOAP_FMAC1 struct ns2__stop_play_backResponse * SOAP_FMAC2 soap_instantiate_ns2__stop_play_backResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__stop_play_backResponse * soap_new_ns2__stop_play_backResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__stop_play_backResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__stop_play_backResponse * soap_new_req_ns2__stop_play_backResponse(
	struct soap *soap)
{
	struct ns2__stop_play_backResponse *_p = ::soap_new_ns2__stop_play_backResponse(soap);
	if (_p)
	{	::soap_default_ns2__stop_play_backResponse(soap, _p);
	}
	return _p;
}

inline struct ns2__stop_play_backResponse * soap_new_set_ns2__stop_play_backResponse(
	struct soap *soap,
	char **result)
{
	struct ns2__stop_play_backResponse *_p = ::soap_new_ns2__stop_play_backResponse(soap);
	if (_p)
	{	::soap_default_ns2__stop_play_backResponse(soap, _p);
		_p->result = result;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__stop_play_backResponse(struct soap*, const struct ns2__stop_play_backResponse *, const char*, const char*);

inline int soap_write_ns2__stop_play_backResponse(struct soap *soap, struct ns2__stop_play_backResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__stop_play_backResponse(soap, p), 0) || ::soap_put_ns2__stop_play_backResponse(soap, p, "ns2:stop-play-backResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__stop_play_backResponse(struct soap *soap, const char *URL, struct ns2__stop_play_backResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__stop_play_backResponse(soap, p), 0) || ::soap_put_ns2__stop_play_backResponse(soap, p, "ns2:stop-play-backResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__stop_play_backResponse(struct soap *soap, const char *URL, struct ns2__stop_play_backResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__stop_play_backResponse(soap, p), 0) || ::soap_put_ns2__stop_play_backResponse(soap, p, "ns2:stop-play-backResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__stop_play_backResponse * SOAP_FMAC4 soap_get_ns2__stop_play_backResponse(struct soap*, struct ns2__stop_play_backResponse *, const char*, const char*);

inline int soap_read_ns2__stop_play_backResponse(struct soap *soap, struct ns2__stop_play_backResponse *p)
{
	if (p)
	{	::soap_default_ns2__stop_play_backResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__stop_play_backResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__stop_play_backResponse(struct soap *soap, const char *URL, struct ns2__stop_play_backResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__stop_play_backResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__stop_play_backResponse(struct soap *soap, struct ns2__stop_play_backResponse *p)
{
	if (::soap_read_ns2__stop_play_backResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__start_play_back_DEFINED
#define SOAP_TYPE_ns2__start_play_back_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__start_play_back(struct soap*, struct ns2__start_play_back *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__start_play_back(struct soap*, const struct ns2__start_play_back *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__start_play_back(struct soap*, const char*, int, const struct ns2__start_play_back *, const char*);
SOAP_FMAC3 struct ns2__start_play_back * SOAP_FMAC4 soap_in_ns2__start_play_back(struct soap*, const char*, struct ns2__start_play_back *, const char*);
SOAP_FMAC1 struct ns2__start_play_back * SOAP_FMAC2 soap_instantiate_ns2__start_play_back(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__start_play_back * soap_new_ns2__start_play_back(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__start_play_back(soap, n, NULL, NULL, NULL);
}

inline struct ns2__start_play_back * soap_new_req_ns2__start_play_back(
	struct soap *soap,
	int media_recv_port)
{
	struct ns2__start_play_back *_p = ::soap_new_ns2__start_play_back(soap);
	if (_p)
	{	::soap_default_ns2__start_play_back(soap, _p);
		_p->media_recv_port = media_recv_port;
	}
	return _p;
}

inline struct ns2__start_play_back * soap_new_set_ns2__start_play_back(
	struct soap *soap,
	char *user_id,
	char *target_dev_id,
	char *target_realm,
	char *media_recv_ip,
	int media_recv_port,
	char *start_time,
	char *end_time)
{
	struct ns2__start_play_back *_p = ::soap_new_ns2__start_play_back(soap);
	if (_p)
	{	::soap_default_ns2__start_play_back(soap, _p);
		_p->user_id = user_id;
		_p->target_dev_id = target_dev_id;
		_p->target_realm = target_realm;
		_p->media_recv_ip = media_recv_ip;
		_p->media_recv_port = media_recv_port;
		_p->start_time = start_time;
		_p->end_time = end_time;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__start_play_back(struct soap*, const struct ns2__start_play_back *, const char*, const char*);

inline int soap_write_ns2__start_play_back(struct soap *soap, struct ns2__start_play_back const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__start_play_back(soap, p), 0) || ::soap_put_ns2__start_play_back(soap, p, "ns2:start-play-back", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__start_play_back(struct soap *soap, const char *URL, struct ns2__start_play_back const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__start_play_back(soap, p), 0) || ::soap_put_ns2__start_play_back(soap, p, "ns2:start-play-back", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__start_play_back(struct soap *soap, const char *URL, struct ns2__start_play_back const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__start_play_back(soap, p), 0) || ::soap_put_ns2__start_play_back(soap, p, "ns2:start-play-back", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__start_play_back * SOAP_FMAC4 soap_get_ns2__start_play_back(struct soap*, struct ns2__start_play_back *, const char*, const char*);

inline int soap_read_ns2__start_play_back(struct soap *soap, struct ns2__start_play_back *p)
{
	if (p)
	{	::soap_default_ns2__start_play_back(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__start_play_back(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__start_play_back(struct soap *soap, const char *URL, struct ns2__start_play_back *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__start_play_back(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__start_play_back(struct soap *soap, struct ns2__start_play_back *p)
{
	if (::soap_read_ns2__start_play_back(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__start_play_backResponse_DEFINED
#define SOAP_TYPE_ns2__start_play_backResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__start_play_backResponse(struct soap*, struct ns2__start_play_backResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__start_play_backResponse(struct soap*, const struct ns2__start_play_backResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__start_play_backResponse(struct soap*, const char*, int, const struct ns2__start_play_backResponse *, const char*);
SOAP_FMAC3 struct ns2__start_play_backResponse * SOAP_FMAC4 soap_in_ns2__start_play_backResponse(struct soap*, const char*, struct ns2__start_play_backResponse *, const char*);
SOAP_FMAC1 struct ns2__start_play_backResponse * SOAP_FMAC2 soap_instantiate_ns2__start_play_backResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__start_play_backResponse * soap_new_ns2__start_play_backResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__start_play_backResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__start_play_backResponse * soap_new_req_ns2__start_play_backResponse(
	struct soap *soap)
{
	struct ns2__start_play_backResponse *_p = ::soap_new_ns2__start_play_backResponse(soap);
	if (_p)
	{	::soap_default_ns2__start_play_backResponse(soap, _p);
	}
	return _p;
}

inline struct ns2__start_play_backResponse * soap_new_set_ns2__start_play_backResponse(
	struct soap *soap,
	char **call_id)
{
	struct ns2__start_play_backResponse *_p = ::soap_new_ns2__start_play_backResponse(soap);
	if (_p)
	{	::soap_default_ns2__start_play_backResponse(soap, _p);
		_p->call_id = call_id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__start_play_backResponse(struct soap*, const struct ns2__start_play_backResponse *, const char*, const char*);

inline int soap_write_ns2__start_play_backResponse(struct soap *soap, struct ns2__start_play_backResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__start_play_backResponse(soap, p), 0) || ::soap_put_ns2__start_play_backResponse(soap, p, "ns2:start-play-backResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__start_play_backResponse(struct soap *soap, const char *URL, struct ns2__start_play_backResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__start_play_backResponse(soap, p), 0) || ::soap_put_ns2__start_play_backResponse(soap, p, "ns2:start-play-backResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__start_play_backResponse(struct soap *soap, const char *URL, struct ns2__start_play_backResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__start_play_backResponse(soap, p), 0) || ::soap_put_ns2__start_play_backResponse(soap, p, "ns2:start-play-backResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__start_play_backResponse * SOAP_FMAC4 soap_get_ns2__start_play_backResponse(struct soap*, struct ns2__start_play_backResponse *, const char*, const char*);

inline int soap_read_ns2__start_play_backResponse(struct soap *soap, struct ns2__start_play_backResponse *p)
{
	if (p)
	{	::soap_default_ns2__start_play_backResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__start_play_backResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__start_play_backResponse(struct soap *soap, const char *URL, struct ns2__start_play_backResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__start_play_backResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__start_play_backResponse(struct soap *soap, struct ns2__start_play_backResponse *p)
{
	if (::soap_read_ns2__start_play_backResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__stop_real_play_DEFINED
#define SOAP_TYPE_ns2__stop_real_play_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__stop_real_play(struct soap*, struct ns2__stop_real_play *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__stop_real_play(struct soap*, const struct ns2__stop_real_play *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__stop_real_play(struct soap*, const char*, int, const struct ns2__stop_real_play *, const char*);
SOAP_FMAC3 struct ns2__stop_real_play * SOAP_FMAC4 soap_in_ns2__stop_real_play(struct soap*, const char*, struct ns2__stop_real_play *, const char*);
SOAP_FMAC1 struct ns2__stop_real_play * SOAP_FMAC2 soap_instantiate_ns2__stop_real_play(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__stop_real_play * soap_new_ns2__stop_real_play(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__stop_real_play(soap, n, NULL, NULL, NULL);
}

inline struct ns2__stop_real_play * soap_new_req_ns2__stop_real_play(
	struct soap *soap)
{
	struct ns2__stop_real_play *_p = ::soap_new_ns2__stop_real_play(soap);
	if (_p)
	{	::soap_default_ns2__stop_real_play(soap, _p);
	}
	return _p;
}

inline struct ns2__stop_real_play * soap_new_set_ns2__stop_real_play(
	struct soap *soap,
	char *user_id,
	char *call_id)
{
	struct ns2__stop_real_play *_p = ::soap_new_ns2__stop_real_play(soap);
	if (_p)
	{	::soap_default_ns2__stop_real_play(soap, _p);
		_p->user_id = user_id;
		_p->call_id = call_id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__stop_real_play(struct soap*, const struct ns2__stop_real_play *, const char*, const char*);

inline int soap_write_ns2__stop_real_play(struct soap *soap, struct ns2__stop_real_play const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__stop_real_play(soap, p), 0) || ::soap_put_ns2__stop_real_play(soap, p, "ns2:stop-real-play", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__stop_real_play(struct soap *soap, const char *URL, struct ns2__stop_real_play const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__stop_real_play(soap, p), 0) || ::soap_put_ns2__stop_real_play(soap, p, "ns2:stop-real-play", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__stop_real_play(struct soap *soap, const char *URL, struct ns2__stop_real_play const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__stop_real_play(soap, p), 0) || ::soap_put_ns2__stop_real_play(soap, p, "ns2:stop-real-play", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__stop_real_play * SOAP_FMAC4 soap_get_ns2__stop_real_play(struct soap*, struct ns2__stop_real_play *, const char*, const char*);

inline int soap_read_ns2__stop_real_play(struct soap *soap, struct ns2__stop_real_play *p)
{
	if (p)
	{	::soap_default_ns2__stop_real_play(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__stop_real_play(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__stop_real_play(struct soap *soap, const char *URL, struct ns2__stop_real_play *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__stop_real_play(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__stop_real_play(struct soap *soap, struct ns2__stop_real_play *p)
{
	if (::soap_read_ns2__stop_real_play(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__stop_real_playResponse_DEFINED
#define SOAP_TYPE_ns2__stop_real_playResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__stop_real_playResponse(struct soap*, struct ns2__stop_real_playResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__stop_real_playResponse(struct soap*, const struct ns2__stop_real_playResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__stop_real_playResponse(struct soap*, const char*, int, const struct ns2__stop_real_playResponse *, const char*);
SOAP_FMAC3 struct ns2__stop_real_playResponse * SOAP_FMAC4 soap_in_ns2__stop_real_playResponse(struct soap*, const char*, struct ns2__stop_real_playResponse *, const char*);
SOAP_FMAC1 struct ns2__stop_real_playResponse * SOAP_FMAC2 soap_instantiate_ns2__stop_real_playResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__stop_real_playResponse * soap_new_ns2__stop_real_playResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__stop_real_playResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__stop_real_playResponse * soap_new_req_ns2__stop_real_playResponse(
	struct soap *soap)
{
	struct ns2__stop_real_playResponse *_p = ::soap_new_ns2__stop_real_playResponse(soap);
	if (_p)
	{	::soap_default_ns2__stop_real_playResponse(soap, _p);
	}
	return _p;
}

inline struct ns2__stop_real_playResponse * soap_new_set_ns2__stop_real_playResponse(
	struct soap *soap,
	char **result)
{
	struct ns2__stop_real_playResponse *_p = ::soap_new_ns2__stop_real_playResponse(soap);
	if (_p)
	{	::soap_default_ns2__stop_real_playResponse(soap, _p);
		_p->result = result;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__stop_real_playResponse(struct soap*, const struct ns2__stop_real_playResponse *, const char*, const char*);

inline int soap_write_ns2__stop_real_playResponse(struct soap *soap, struct ns2__stop_real_playResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__stop_real_playResponse(soap, p), 0) || ::soap_put_ns2__stop_real_playResponse(soap, p, "ns2:stop-real-playResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__stop_real_playResponse(struct soap *soap, const char *URL, struct ns2__stop_real_playResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__stop_real_playResponse(soap, p), 0) || ::soap_put_ns2__stop_real_playResponse(soap, p, "ns2:stop-real-playResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__stop_real_playResponse(struct soap *soap, const char *URL, struct ns2__stop_real_playResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__stop_real_playResponse(soap, p), 0) || ::soap_put_ns2__stop_real_playResponse(soap, p, "ns2:stop-real-playResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__stop_real_playResponse * SOAP_FMAC4 soap_get_ns2__stop_real_playResponse(struct soap*, struct ns2__stop_real_playResponse *, const char*, const char*);

inline int soap_read_ns2__stop_real_playResponse(struct soap *soap, struct ns2__stop_real_playResponse *p)
{
	if (p)
	{	::soap_default_ns2__stop_real_playResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__stop_real_playResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__stop_real_playResponse(struct soap *soap, const char *URL, struct ns2__stop_real_playResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__stop_real_playResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__stop_real_playResponse(struct soap *soap, struct ns2__stop_real_playResponse *p)
{
	if (::soap_read_ns2__stop_real_playResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__start_real_play_DEFINED
#define SOAP_TYPE_ns2__start_real_play_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__start_real_play(struct soap*, struct ns2__start_real_play *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__start_real_play(struct soap*, const struct ns2__start_real_play *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__start_real_play(struct soap*, const char*, int, const struct ns2__start_real_play *, const char*);
SOAP_FMAC3 struct ns2__start_real_play * SOAP_FMAC4 soap_in_ns2__start_real_play(struct soap*, const char*, struct ns2__start_real_play *, const char*);
SOAP_FMAC1 struct ns2__start_real_play * SOAP_FMAC2 soap_instantiate_ns2__start_real_play(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__start_real_play * soap_new_ns2__start_real_play(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__start_real_play(soap, n, NULL, NULL, NULL);
}

inline struct ns2__start_real_play * soap_new_req_ns2__start_real_play(
	struct soap *soap,
	int media_recv_port)
{
	struct ns2__start_real_play *_p = ::soap_new_ns2__start_real_play(soap);
	if (_p)
	{	::soap_default_ns2__start_real_play(soap, _p);
		_p->media_recv_port = media_recv_port;
	}
	return _p;
}

inline struct ns2__start_real_play * soap_new_set_ns2__start_real_play(
	struct soap *soap,
	char *user_id,
	char *target_dev_id,
	char *target_realm,
	char *media_recv_ip,
	int media_recv_port)
{
	struct ns2__start_real_play *_p = ::soap_new_ns2__start_real_play(soap);
	if (_p)
	{	::soap_default_ns2__start_real_play(soap, _p);
		_p->user_id = user_id;
		_p->target_dev_id = target_dev_id;
		_p->target_realm = target_realm;
		_p->media_recv_ip = media_recv_ip;
		_p->media_recv_port = media_recv_port;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__start_real_play(struct soap*, const struct ns2__start_real_play *, const char*, const char*);

inline int soap_write_ns2__start_real_play(struct soap *soap, struct ns2__start_real_play const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__start_real_play(soap, p), 0) || ::soap_put_ns2__start_real_play(soap, p, "ns2:start-real-play", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__start_real_play(struct soap *soap, const char *URL, struct ns2__start_real_play const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__start_real_play(soap, p), 0) || ::soap_put_ns2__start_real_play(soap, p, "ns2:start-real-play", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__start_real_play(struct soap *soap, const char *URL, struct ns2__start_real_play const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__start_real_play(soap, p), 0) || ::soap_put_ns2__start_real_play(soap, p, "ns2:start-real-play", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__start_real_play * SOAP_FMAC4 soap_get_ns2__start_real_play(struct soap*, struct ns2__start_real_play *, const char*, const char*);

inline int soap_read_ns2__start_real_play(struct soap *soap, struct ns2__start_real_play *p)
{
	if (p)
	{	::soap_default_ns2__start_real_play(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__start_real_play(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__start_real_play(struct soap *soap, const char *URL, struct ns2__start_real_play *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__start_real_play(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__start_real_play(struct soap *soap, struct ns2__start_real_play *p)
{
	if (::soap_read_ns2__start_real_play(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__start_real_playResponse_DEFINED
#define SOAP_TYPE_ns2__start_real_playResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__start_real_playResponse(struct soap*, struct ns2__start_real_playResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__start_real_playResponse(struct soap*, const struct ns2__start_real_playResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__start_real_playResponse(struct soap*, const char*, int, const struct ns2__start_real_playResponse *, const char*);
SOAP_FMAC3 struct ns2__start_real_playResponse * SOAP_FMAC4 soap_in_ns2__start_real_playResponse(struct soap*, const char*, struct ns2__start_real_playResponse *, const char*);
SOAP_FMAC1 struct ns2__start_real_playResponse * SOAP_FMAC2 soap_instantiate_ns2__start_real_playResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__start_real_playResponse * soap_new_ns2__start_real_playResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__start_real_playResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__start_real_playResponse * soap_new_req_ns2__start_real_playResponse(
	struct soap *soap)
{
	struct ns2__start_real_playResponse *_p = ::soap_new_ns2__start_real_playResponse(soap);
	if (_p)
	{	::soap_default_ns2__start_real_playResponse(soap, _p);
	}
	return _p;
}

inline struct ns2__start_real_playResponse * soap_new_set_ns2__start_real_playResponse(
	struct soap *soap,
	char **call_id)
{
	struct ns2__start_real_playResponse *_p = ::soap_new_ns2__start_real_playResponse(soap);
	if (_p)
	{	::soap_default_ns2__start_real_playResponse(soap, _p);
		_p->call_id = call_id;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__start_real_playResponse(struct soap*, const struct ns2__start_real_playResponse *, const char*, const char*);

inline int soap_write_ns2__start_real_playResponse(struct soap *soap, struct ns2__start_real_playResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__start_real_playResponse(soap, p), 0) || ::soap_put_ns2__start_real_playResponse(soap, p, "ns2:start-real-playResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__start_real_playResponse(struct soap *soap, const char *URL, struct ns2__start_real_playResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__start_real_playResponse(soap, p), 0) || ::soap_put_ns2__start_real_playResponse(soap, p, "ns2:start-real-playResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__start_real_playResponse(struct soap *soap, const char *URL, struct ns2__start_real_playResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__start_real_playResponse(soap, p), 0) || ::soap_put_ns2__start_real_playResponse(soap, p, "ns2:start-real-playResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__start_real_playResponse * SOAP_FMAC4 soap_get_ns2__start_real_playResponse(struct soap*, struct ns2__start_real_playResponse *, const char*, const char*);

inline int soap_read_ns2__start_real_playResponse(struct soap *soap, struct ns2__start_real_playResponse *p)
{
	if (p)
	{	::soap_default_ns2__start_real_playResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__start_real_playResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__start_real_playResponse(struct soap *soap, const char *URL, struct ns2__start_real_playResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__start_real_playResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__start_real_playResponse(struct soap *soap, struct ns2__start_real_playResponse *p)
{
	if (::soap_read_ns2__start_real_playResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__ptz_control_DEFINED
#define SOAP_TYPE_ns2__ptz_control_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ptz_control(struct soap*, struct ns2__ptz_control *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__ptz_control(struct soap*, const struct ns2__ptz_control *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ptz_control(struct soap*, const char*, int, const struct ns2__ptz_control *, const char*);
SOAP_FMAC3 struct ns2__ptz_control * SOAP_FMAC4 soap_in_ns2__ptz_control(struct soap*, const char*, struct ns2__ptz_control *, const char*);
SOAP_FMAC1 struct ns2__ptz_control * SOAP_FMAC2 soap_instantiate_ns2__ptz_control(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__ptz_control * soap_new_ns2__ptz_control(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ptz_control(soap, n, NULL, NULL, NULL);
}

inline struct ns2__ptz_control * soap_new_req_ns2__ptz_control(
	struct soap *soap,
	int ptz,
	int ptz_speed)
{
	struct ns2__ptz_control *_p = ::soap_new_ns2__ptz_control(soap);
	if (_p)
	{	::soap_default_ns2__ptz_control(soap, _p);
		_p->ptz = ptz;
		_p->ptz_speed = ptz_speed;
	}
	return _p;
}

inline struct ns2__ptz_control * soap_new_set_ns2__ptz_control(
	struct soap *soap,
	char *target_dev_id,
	char *target_realm,
	int ptz,
	int ptz_speed)
{
	struct ns2__ptz_control *_p = ::soap_new_ns2__ptz_control(soap);
	if (_p)
	{	::soap_default_ns2__ptz_control(soap, _p);
		_p->target_dev_id = target_dev_id;
		_p->target_realm = target_realm;
		_p->ptz = ptz;
		_p->ptz_speed = ptz_speed;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ptz_control(struct soap*, const struct ns2__ptz_control *, const char*, const char*);

inline int soap_write_ns2__ptz_control(struct soap *soap, struct ns2__ptz_control const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__ptz_control(soap, p), 0) || ::soap_put_ns2__ptz_control(soap, p, "ns2:ptz-control", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ptz_control(struct soap *soap, const char *URL, struct ns2__ptz_control const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__ptz_control(soap, p), 0) || ::soap_put_ns2__ptz_control(soap, p, "ns2:ptz-control", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ptz_control(struct soap *soap, const char *URL, struct ns2__ptz_control const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__ptz_control(soap, p), 0) || ::soap_put_ns2__ptz_control(soap, p, "ns2:ptz-control", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__ptz_control * SOAP_FMAC4 soap_get_ns2__ptz_control(struct soap*, struct ns2__ptz_control *, const char*, const char*);

inline int soap_read_ns2__ptz_control(struct soap *soap, struct ns2__ptz_control *p)
{
	if (p)
	{	::soap_default_ns2__ptz_control(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ptz_control(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ptz_control(struct soap *soap, const char *URL, struct ns2__ptz_control *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ptz_control(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__ptz_control(struct soap *soap, struct ns2__ptz_control *p)
{
	if (::soap_read_ns2__ptz_control(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__ptz_controlResponse_DEFINED
#define SOAP_TYPE_ns2__ptz_controlResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__ptz_controlResponse(struct soap*, struct ns2__ptz_controlResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__ptz_controlResponse(struct soap*, const struct ns2__ptz_controlResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ptz_controlResponse(struct soap*, const char*, int, const struct ns2__ptz_controlResponse *, const char*);
SOAP_FMAC3 struct ns2__ptz_controlResponse * SOAP_FMAC4 soap_in_ns2__ptz_controlResponse(struct soap*, const char*, struct ns2__ptz_controlResponse *, const char*);
SOAP_FMAC1 struct ns2__ptz_controlResponse * SOAP_FMAC2 soap_instantiate_ns2__ptz_controlResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__ptz_controlResponse * soap_new_ns2__ptz_controlResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ptz_controlResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__ptz_controlResponse * soap_new_req_ns2__ptz_controlResponse(
	struct soap *soap)
{
	struct ns2__ptz_controlResponse *_p = ::soap_new_ns2__ptz_controlResponse(soap);
	if (_p)
	{	::soap_default_ns2__ptz_controlResponse(soap, _p);
	}
	return _p;
}

inline struct ns2__ptz_controlResponse * soap_new_set_ns2__ptz_controlResponse(
	struct soap *soap,
	char **result)
{
	struct ns2__ptz_controlResponse *_p = ::soap_new_ns2__ptz_controlResponse(soap);
	if (_p)
	{	::soap_default_ns2__ptz_controlResponse(soap, _p);
		_p->result = result;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__ptz_controlResponse(struct soap*, const struct ns2__ptz_controlResponse *, const char*, const char*);

inline int soap_write_ns2__ptz_controlResponse(struct soap *soap, struct ns2__ptz_controlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__ptz_controlResponse(soap, p), 0) || ::soap_put_ns2__ptz_controlResponse(soap, p, "ns2:ptz-controlResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ptz_controlResponse(struct soap *soap, const char *URL, struct ns2__ptz_controlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__ptz_controlResponse(soap, p), 0) || ::soap_put_ns2__ptz_controlResponse(soap, p, "ns2:ptz-controlResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ptz_controlResponse(struct soap *soap, const char *URL, struct ns2__ptz_controlResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__ptz_controlResponse(soap, p), 0) || ::soap_put_ns2__ptz_controlResponse(soap, p, "ns2:ptz-controlResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__ptz_controlResponse * SOAP_FMAC4 soap_get_ns2__ptz_controlResponse(struct soap*, struct ns2__ptz_controlResponse *, const char*, const char*);

inline int soap_read_ns2__ptz_controlResponse(struct soap *soap, struct ns2__ptz_controlResponse *p)
{
	if (p)
	{	::soap_default_ns2__ptz_controlResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__ptz_controlResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ptz_controlResponse(struct soap *soap, const char *URL, struct ns2__ptz_controlResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__ptz_controlResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__ptz_controlResponse(struct soap *soap, struct ns2__ptz_controlResponse *p)
{
	if (::soap_read_ns2__ptz_controlResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__get_directory_info_DEFINED
#define SOAP_TYPE_ns2__get_directory_info_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__get_directory_info(struct soap*, struct ns2__get_directory_info *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__get_directory_info(struct soap*, const struct ns2__get_directory_info *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__get_directory_info(struct soap*, const char*, int, const struct ns2__get_directory_info *, const char*);
SOAP_FMAC3 struct ns2__get_directory_info * SOAP_FMAC4 soap_in_ns2__get_directory_info(struct soap*, const char*, struct ns2__get_directory_info *, const char*);
SOAP_FMAC1 struct ns2__get_directory_info * SOAP_FMAC2 soap_instantiate_ns2__get_directory_info(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__get_directory_info * soap_new_ns2__get_directory_info(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__get_directory_info(soap, n, NULL, NULL, NULL);
}

inline struct ns2__get_directory_info * soap_new_req_ns2__get_directory_info(
	struct soap *soap)
{
	struct ns2__get_directory_info *_p = ::soap_new_ns2__get_directory_info(soap);
	if (_p)
	{	::soap_default_ns2__get_directory_info(soap, _p);
	}
	return _p;
}

inline struct ns2__get_directory_info * soap_new_set_ns2__get_directory_info(
	struct soap *soap,
	char *target_dev_id,
	char *target_realm)
{
	struct ns2__get_directory_info *_p = ::soap_new_ns2__get_directory_info(soap);
	if (_p)
	{	::soap_default_ns2__get_directory_info(soap, _p);
		_p->target_dev_id = target_dev_id;
		_p->target_realm = target_realm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__get_directory_info(struct soap*, const struct ns2__get_directory_info *, const char*, const char*);

inline int soap_write_ns2__get_directory_info(struct soap *soap, struct ns2__get_directory_info const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__get_directory_info(soap, p), 0) || ::soap_put_ns2__get_directory_info(soap, p, "ns2:get-directory-info", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__get_directory_info(struct soap *soap, const char *URL, struct ns2__get_directory_info const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__get_directory_info(soap, p), 0) || ::soap_put_ns2__get_directory_info(soap, p, "ns2:get-directory-info", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__get_directory_info(struct soap *soap, const char *URL, struct ns2__get_directory_info const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__get_directory_info(soap, p), 0) || ::soap_put_ns2__get_directory_info(soap, p, "ns2:get-directory-info", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__get_directory_info * SOAP_FMAC4 soap_get_ns2__get_directory_info(struct soap*, struct ns2__get_directory_info *, const char*, const char*);

inline int soap_read_ns2__get_directory_info(struct soap *soap, struct ns2__get_directory_info *p)
{
	if (p)
	{	::soap_default_ns2__get_directory_info(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__get_directory_info(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__get_directory_info(struct soap *soap, const char *URL, struct ns2__get_directory_info *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__get_directory_info(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__get_directory_info(struct soap *soap, struct ns2__get_directory_info *p)
{
	if (::soap_read_ns2__get_directory_info(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__get_directory_infoResponse_DEFINED
#define SOAP_TYPE_ns2__get_directory_infoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__get_directory_infoResponse(struct soap*, struct ns2__get_directory_infoResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__get_directory_infoResponse(struct soap*, const struct ns2__get_directory_infoResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__get_directory_infoResponse(struct soap*, const char*, int, const struct ns2__get_directory_infoResponse *, const char*);
SOAP_FMAC3 struct ns2__get_directory_infoResponse * SOAP_FMAC4 soap_in_ns2__get_directory_infoResponse(struct soap*, const char*, struct ns2__get_directory_infoResponse *, const char*);
SOAP_FMAC1 struct ns2__get_directory_infoResponse * SOAP_FMAC2 soap_instantiate_ns2__get_directory_infoResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__get_directory_infoResponse * soap_new_ns2__get_directory_infoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__get_directory_infoResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__get_directory_infoResponse * soap_new_req_ns2__get_directory_infoResponse(
	struct soap *soap)
{
	struct ns2__get_directory_infoResponse *_p = ::soap_new_ns2__get_directory_infoResponse(soap);
	if (_p)
	{	::soap_default_ns2__get_directory_infoResponse(soap, _p);
	}
	return _p;
}

inline struct ns2__get_directory_infoResponse * soap_new_set_ns2__get_directory_infoResponse(
	struct soap *soap,
	char **directory_info_buf_out)
{
	struct ns2__get_directory_infoResponse *_p = ::soap_new_ns2__get_directory_infoResponse(soap);
	if (_p)
	{	::soap_default_ns2__get_directory_infoResponse(soap, _p);
		_p->directory_info_buf_out = directory_info_buf_out;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__get_directory_infoResponse(struct soap*, const struct ns2__get_directory_infoResponse *, const char*, const char*);

inline int soap_write_ns2__get_directory_infoResponse(struct soap *soap, struct ns2__get_directory_infoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__get_directory_infoResponse(soap, p), 0) || ::soap_put_ns2__get_directory_infoResponse(soap, p, "ns2:get-directory-infoResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__get_directory_infoResponse(struct soap *soap, const char *URL, struct ns2__get_directory_infoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__get_directory_infoResponse(soap, p), 0) || ::soap_put_ns2__get_directory_infoResponse(soap, p, "ns2:get-directory-infoResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__get_directory_infoResponse(struct soap *soap, const char *URL, struct ns2__get_directory_infoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__get_directory_infoResponse(soap, p), 0) || ::soap_put_ns2__get_directory_infoResponse(soap, p, "ns2:get-directory-infoResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__get_directory_infoResponse * SOAP_FMAC4 soap_get_ns2__get_directory_infoResponse(struct soap*, struct ns2__get_directory_infoResponse *, const char*, const char*);

inline int soap_read_ns2__get_directory_infoResponse(struct soap *soap, struct ns2__get_directory_infoResponse *p)
{
	if (p)
	{	::soap_default_ns2__get_directory_infoResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__get_directory_infoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__get_directory_infoResponse(struct soap *soap, const char *URL, struct ns2__get_directory_infoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__get_directory_infoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__get_directory_infoResponse(struct soap *soap, struct ns2__get_directory_infoResponse *p)
{
	if (::soap_read_ns2__get_directory_infoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__keepalive_DEFINED
#define SOAP_TYPE_ns2__keepalive_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__keepalive(struct soap*, struct ns2__keepalive *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__keepalive(struct soap*, const struct ns2__keepalive *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__keepalive(struct soap*, const char*, int, const struct ns2__keepalive *, const char*);
SOAP_FMAC3 struct ns2__keepalive * SOAP_FMAC4 soap_in_ns2__keepalive(struct soap*, const char*, struct ns2__keepalive *, const char*);
SOAP_FMAC1 struct ns2__keepalive * SOAP_FMAC2 soap_instantiate_ns2__keepalive(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__keepalive * soap_new_ns2__keepalive(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__keepalive(soap, n, NULL, NULL, NULL);
}

inline struct ns2__keepalive * soap_new_req_ns2__keepalive(
	struct soap *soap)
{
	struct ns2__keepalive *_p = ::soap_new_ns2__keepalive(soap);
	if (_p)
	{	::soap_default_ns2__keepalive(soap, _p);
	}
	return _p;
}

inline struct ns2__keepalive * soap_new_set_ns2__keepalive(
	struct soap *soap,
	char *user_id,
	char *password)
{
	struct ns2__keepalive *_p = ::soap_new_ns2__keepalive(soap);
	if (_p)
	{	::soap_default_ns2__keepalive(soap, _p);
		_p->user_id = user_id;
		_p->password = password;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__keepalive(struct soap*, const struct ns2__keepalive *, const char*, const char*);

inline int soap_write_ns2__keepalive(struct soap *soap, struct ns2__keepalive const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__keepalive(soap, p), 0) || ::soap_put_ns2__keepalive(soap, p, "ns2:keepalive", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__keepalive(struct soap *soap, const char *URL, struct ns2__keepalive const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__keepalive(soap, p), 0) || ::soap_put_ns2__keepalive(soap, p, "ns2:keepalive", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__keepalive(struct soap *soap, const char *URL, struct ns2__keepalive const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__keepalive(soap, p), 0) || ::soap_put_ns2__keepalive(soap, p, "ns2:keepalive", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__keepalive * SOAP_FMAC4 soap_get_ns2__keepalive(struct soap*, struct ns2__keepalive *, const char*, const char*);

inline int soap_read_ns2__keepalive(struct soap *soap, struct ns2__keepalive *p)
{
	if (p)
	{	::soap_default_ns2__keepalive(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__keepalive(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__keepalive(struct soap *soap, const char *URL, struct ns2__keepalive *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__keepalive(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__keepalive(struct soap *soap, struct ns2__keepalive *p)
{
	if (::soap_read_ns2__keepalive(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__keepaliveResponse_DEFINED
#define SOAP_TYPE_ns2__keepaliveResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__keepaliveResponse(struct soap*, struct ns2__keepaliveResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__keepaliveResponse(struct soap*, const struct ns2__keepaliveResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__keepaliveResponse(struct soap*, const char*, int, const struct ns2__keepaliveResponse *, const char*);
SOAP_FMAC3 struct ns2__keepaliveResponse * SOAP_FMAC4 soap_in_ns2__keepaliveResponse(struct soap*, const char*, struct ns2__keepaliveResponse *, const char*);
SOAP_FMAC1 struct ns2__keepaliveResponse * SOAP_FMAC2 soap_instantiate_ns2__keepaliveResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__keepaliveResponse * soap_new_ns2__keepaliveResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__keepaliveResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__keepaliveResponse * soap_new_req_ns2__keepaliveResponse(
	struct soap *soap)
{
	struct ns2__keepaliveResponse *_p = ::soap_new_ns2__keepaliveResponse(soap);
	if (_p)
	{	::soap_default_ns2__keepaliveResponse(soap, _p);
	}
	return _p;
}

inline struct ns2__keepaliveResponse * soap_new_set_ns2__keepaliveResponse(
	struct soap *soap,
	char **result)
{
	struct ns2__keepaliveResponse *_p = ::soap_new_ns2__keepaliveResponse(soap);
	if (_p)
	{	::soap_default_ns2__keepaliveResponse(soap, _p);
		_p->result = result;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__keepaliveResponse(struct soap*, const struct ns2__keepaliveResponse *, const char*, const char*);

inline int soap_write_ns2__keepaliveResponse(struct soap *soap, struct ns2__keepaliveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__keepaliveResponse(soap, p), 0) || ::soap_put_ns2__keepaliveResponse(soap, p, "ns2:keepaliveResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__keepaliveResponse(struct soap *soap, const char *URL, struct ns2__keepaliveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__keepaliveResponse(soap, p), 0) || ::soap_put_ns2__keepaliveResponse(soap, p, "ns2:keepaliveResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__keepaliveResponse(struct soap *soap, const char *URL, struct ns2__keepaliveResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__keepaliveResponse(soap, p), 0) || ::soap_put_ns2__keepaliveResponse(soap, p, "ns2:keepaliveResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__keepaliveResponse * SOAP_FMAC4 soap_get_ns2__keepaliveResponse(struct soap*, struct ns2__keepaliveResponse *, const char*, const char*);

inline int soap_read_ns2__keepaliveResponse(struct soap *soap, struct ns2__keepaliveResponse *p)
{
	if (p)
	{	::soap_default_ns2__keepaliveResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__keepaliveResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__keepaliveResponse(struct soap *soap, const char *URL, struct ns2__keepaliveResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__keepaliveResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__keepaliveResponse(struct soap *soap, struct ns2__keepaliveResponse *p)
{
	if (::soap_read_ns2__keepaliveResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__logout_DEFINED
#define SOAP_TYPE_ns2__logout_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__logout(struct soap*, struct ns2__logout *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__logout(struct soap*, const struct ns2__logout *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__logout(struct soap*, const char*, int, const struct ns2__logout *, const char*);
SOAP_FMAC3 struct ns2__logout * SOAP_FMAC4 soap_in_ns2__logout(struct soap*, const char*, struct ns2__logout *, const char*);
SOAP_FMAC1 struct ns2__logout * SOAP_FMAC2 soap_instantiate_ns2__logout(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__logout * soap_new_ns2__logout(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__logout(soap, n, NULL, NULL, NULL);
}

inline struct ns2__logout * soap_new_req_ns2__logout(
	struct soap *soap)
{
	struct ns2__logout *_p = ::soap_new_ns2__logout(soap);
	if (_p)
	{	::soap_default_ns2__logout(soap, _p);
	}
	return _p;
}

inline struct ns2__logout * soap_new_set_ns2__logout(
	struct soap *soap,
	char *user_id,
	char *password)
{
	struct ns2__logout *_p = ::soap_new_ns2__logout(soap);
	if (_p)
	{	::soap_default_ns2__logout(soap, _p);
		_p->user_id = user_id;
		_p->password = password;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__logout(struct soap*, const struct ns2__logout *, const char*, const char*);

inline int soap_write_ns2__logout(struct soap *soap, struct ns2__logout const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__logout(soap, p), 0) || ::soap_put_ns2__logout(soap, p, "ns2:logout", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__logout(struct soap *soap, const char *URL, struct ns2__logout const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__logout(soap, p), 0) || ::soap_put_ns2__logout(soap, p, "ns2:logout", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__logout(struct soap *soap, const char *URL, struct ns2__logout const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__logout(soap, p), 0) || ::soap_put_ns2__logout(soap, p, "ns2:logout", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__logout * SOAP_FMAC4 soap_get_ns2__logout(struct soap*, struct ns2__logout *, const char*, const char*);

inline int soap_read_ns2__logout(struct soap *soap, struct ns2__logout *p)
{
	if (p)
	{	::soap_default_ns2__logout(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__logout(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__logout(struct soap *soap, const char *URL, struct ns2__logout *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__logout(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__logout(struct soap *soap, struct ns2__logout *p)
{
	if (::soap_read_ns2__logout(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__logoutResponse_DEFINED
#define SOAP_TYPE_ns2__logoutResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__logoutResponse(struct soap*, struct ns2__logoutResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__logoutResponse(struct soap*, const struct ns2__logoutResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__logoutResponse(struct soap*, const char*, int, const struct ns2__logoutResponse *, const char*);
SOAP_FMAC3 struct ns2__logoutResponse * SOAP_FMAC4 soap_in_ns2__logoutResponse(struct soap*, const char*, struct ns2__logoutResponse *, const char*);
SOAP_FMAC1 struct ns2__logoutResponse * SOAP_FMAC2 soap_instantiate_ns2__logoutResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__logoutResponse * soap_new_ns2__logoutResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__logoutResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__logoutResponse * soap_new_req_ns2__logoutResponse(
	struct soap *soap)
{
	struct ns2__logoutResponse *_p = ::soap_new_ns2__logoutResponse(soap);
	if (_p)
	{	::soap_default_ns2__logoutResponse(soap, _p);
	}
	return _p;
}

inline struct ns2__logoutResponse * soap_new_set_ns2__logoutResponse(
	struct soap *soap,
	char **result)
{
	struct ns2__logoutResponse *_p = ::soap_new_ns2__logoutResponse(soap);
	if (_p)
	{	::soap_default_ns2__logoutResponse(soap, _p);
		_p->result = result;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__logoutResponse(struct soap*, const struct ns2__logoutResponse *, const char*, const char*);

inline int soap_write_ns2__logoutResponse(struct soap *soap, struct ns2__logoutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__logoutResponse(soap, p), 0) || ::soap_put_ns2__logoutResponse(soap, p, "ns2:logoutResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__logoutResponse(struct soap *soap, const char *URL, struct ns2__logoutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__logoutResponse(soap, p), 0) || ::soap_put_ns2__logoutResponse(soap, p, "ns2:logoutResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__logoutResponse(struct soap *soap, const char *URL, struct ns2__logoutResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__logoutResponse(soap, p), 0) || ::soap_put_ns2__logoutResponse(soap, p, "ns2:logoutResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__logoutResponse * SOAP_FMAC4 soap_get_ns2__logoutResponse(struct soap*, struct ns2__logoutResponse *, const char*, const char*);

inline int soap_read_ns2__logoutResponse(struct soap *soap, struct ns2__logoutResponse *p)
{
	if (p)
	{	::soap_default_ns2__logoutResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__logoutResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__logoutResponse(struct soap *soap, const char *URL, struct ns2__logoutResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__logoutResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__logoutResponse(struct soap *soap, struct ns2__logoutResponse *p)
{
	if (::soap_read_ns2__logoutResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__login_DEFINED
#define SOAP_TYPE_ns2__login_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__login(struct soap*, struct ns2__login *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__login(struct soap*, const struct ns2__login *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__login(struct soap*, const char*, int, const struct ns2__login *, const char*);
SOAP_FMAC3 struct ns2__login * SOAP_FMAC4 soap_in_ns2__login(struct soap*, const char*, struct ns2__login *, const char*);
SOAP_FMAC1 struct ns2__login * SOAP_FMAC2 soap_instantiate_ns2__login(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__login * soap_new_ns2__login(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__login(soap, n, NULL, NULL, NULL);
}

inline struct ns2__login * soap_new_req_ns2__login(
	struct soap *soap)
{
	struct ns2__login *_p = ::soap_new_ns2__login(soap);
	if (_p)
	{	::soap_default_ns2__login(soap, _p);
	}
	return _p;
}

inline struct ns2__login * soap_new_set_ns2__login(
	struct soap *soap,
	char *user_id,
	char *password)
{
	struct ns2__login *_p = ::soap_new_ns2__login(soap);
	if (_p)
	{	::soap_default_ns2__login(soap, _p);
		_p->user_id = user_id;
		_p->password = password;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__login(struct soap*, const struct ns2__login *, const char*, const char*);

inline int soap_write_ns2__login(struct soap *soap, struct ns2__login const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__login(soap, p), 0) || ::soap_put_ns2__login(soap, p, "ns2:login", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__login(struct soap *soap, const char *URL, struct ns2__login const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__login(soap, p), 0) || ::soap_put_ns2__login(soap, p, "ns2:login", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__login(struct soap *soap, const char *URL, struct ns2__login const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__login(soap, p), 0) || ::soap_put_ns2__login(soap, p, "ns2:login", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__login * SOAP_FMAC4 soap_get_ns2__login(struct soap*, struct ns2__login *, const char*, const char*);

inline int soap_read_ns2__login(struct soap *soap, struct ns2__login *p)
{
	if (p)
	{	::soap_default_ns2__login(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__login(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__login(struct soap *soap, const char *URL, struct ns2__login *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__login(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__login(struct soap *soap, struct ns2__login *p)
{
	if (::soap_read_ns2__login(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__loginResponse_DEFINED
#define SOAP_TYPE_ns2__loginResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__loginResponse(struct soap*, struct ns2__loginResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__loginResponse(struct soap*, const struct ns2__loginResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__loginResponse(struct soap*, const char*, int, const struct ns2__loginResponse *, const char*);
SOAP_FMAC3 struct ns2__loginResponse * SOAP_FMAC4 soap_in_ns2__loginResponse(struct soap*, const char*, struct ns2__loginResponse *, const char*);
SOAP_FMAC1 struct ns2__loginResponse * SOAP_FMAC2 soap_instantiate_ns2__loginResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__loginResponse * soap_new_ns2__loginResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__loginResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns2__loginResponse * soap_new_req_ns2__loginResponse(
	struct soap *soap)
{
	struct ns2__loginResponse *_p = ::soap_new_ns2__loginResponse(soap);
	if (_p)
	{	::soap_default_ns2__loginResponse(soap, _p);
	}
	return _p;
}

inline struct ns2__loginResponse * soap_new_set_ns2__loginResponse(
	struct soap *soap,
	char **result)
{
	struct ns2__loginResponse *_p = ::soap_new_ns2__loginResponse(soap);
	if (_p)
	{	::soap_default_ns2__loginResponse(soap, _p);
		_p->result = result;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__loginResponse(struct soap*, const struct ns2__loginResponse *, const char*, const char*);

inline int soap_write_ns2__loginResponse(struct soap *soap, struct ns2__loginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns2__loginResponse(soap, p), 0) || ::soap_put_ns2__loginResponse(soap, p, "ns2:loginResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__loginResponse(struct soap *soap, const char *URL, struct ns2__loginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__loginResponse(soap, p), 0) || ::soap_put_ns2__loginResponse(soap, p, "ns2:loginResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__loginResponse(struct soap *soap, const char *URL, struct ns2__loginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns2__loginResponse(soap, p), 0) || ::soap_put_ns2__loginResponse(soap, p, "ns2:loginResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns2__loginResponse * SOAP_FMAC4 soap_get_ns2__loginResponse(struct soap*, struct ns2__loginResponse *, const char*, const char*);

inline int soap_read_ns2__loginResponse(struct soap *soap, struct ns2__loginResponse *p)
{
	if (p)
	{	::soap_default_ns2__loginResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns2__loginResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__loginResponse(struct soap *soap, const char *URL, struct ns2__loginResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns2__loginResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__loginResponse(struct soap *soap, struct ns2__loginResponse *p)
{
	if (::soap_read_ns2__loginResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTostring_DEFINED
#define SOAP_TYPE_PointerTostring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */
